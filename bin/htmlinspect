#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

use HTML::TreeBuilder;
use Getopt::Long;

our $show_attributes;
our $show_first_child;
our $show_last_child;
our @search;
our $fancy;

Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions(
    "s|search=s" => \@search,
    "f|fancy" => \$fancy,
    "a|attributes|show-attributes" => \$show_attributes,
    "first-child|show-first-child" => \$show_first_child,
    "last-child|show-last-child"   => \$show_last_child,
    "h|help" => sub { usage(); exit 0; }
) or die("Type '$0 --help' for help.\n");

sub usage { print <<"END"; }
usage:
  htmlinspect [<option> ...] [<file> ...]
options:
  -h, --help
  -a, --[show-]attributes
  -s, --search='<search>'     <tag>  and/or  .<class>  and/or  #<id>
  -f, --fancy
      --[show-]first-child
      --[show-]last-child
END

local $/ = undef;
while (<>) {
    my $tree = HTML::TreeBuilder->new();
    $tree->parse($_);
    $tree->eof();
    $tree->elementify();
    if (scalar @search) {
        my @elements = search($tree, @search);
        foreach my $element (@elements) {
            htmlinspect($element, $ARGV);
        }
    } else {
        htmlinspect($tree, $ARGV);
    }
}

our %filename_printed;

sub htmlinspect {
    my ($element, $filename, %args) = @_;
    my $tagname = eval { $element->tag };
    my $index     = $args{index};
    my $nchildren = $args{nchildren};
    if (defined $tagname) {
        my $class = $element->attr('class');
        my $id    = $element->attr('id');
        my @class = defined $class ? split(' ', $class) : ();

        my $suffix = "";
        $suffix .= ".$_" foreach @class;
        $suffix .= "#$id" if defined $id;

        if ($show_attributes) {
            my @attr_names = sort { lc($a) cmp lc($b) } grep { $_ ne "class" && $_ ne "id" } $element->all_external_attr_names;
            foreach my $attr_name (@attr_names) {
                $suffix .= sprintf("[%s]", $attr_name);
            }
        }
        if (defined $index) {
            if ($show_first_child && $index == 0) {
                $suffix .= ":first-child";
            }
            if ($show_last_child && $index == $nchildren - 1) {
                $suffix .= ":last-child";
            }
        }

        my $parents = $args{parents} // [];
        my @parents = @$parents;
        my $parents_string = join("", map { "$_ " } @$parents);
        if ($args{fancy}) {
            if (!$filename_printed{$filename}) {
                print "$filename:\n";
                $filename_printed{$filename} = 1;
            }
            print " " x 4;
        } else {
            print "$filename: ";
        }
        print($parents_string, $tagname, $suffix, "\n");

        my @children = $element->content_list();
        my $index = 0;
        my $nchildren = scalar @children;
        foreach my $child (@children) {
            htmlinspect($child, $filename,
                        parents => [@parents, $tagname . $suffix],
                        index => $index,
                        nchildren => $nchildren);
            $index += 1;
        }
    }
}

sub search {
    my ($tree, @search) = @_;
    my @or;
    foreach my $search (@search) {
        my @and;
        while ($search =~ s{(?:([\.\#])([A-Za-z][A-Za-z0-9\-\_\:\.]*))$}{}x) {
            my ($prefix, $token) = ($1, $2);
            if ($prefix eq ".") {
                push(@and, sub {
                         my $class = $_[0]->attr('class');
                         return defined $class && $class =~ m{(^|\s)\Q$token\E($|\s)};
                     });
            } else {
                push(@and, sub {
                         my $id = $_[0]->attr('id');
                         return defined $id && $id eq $token;
                     });
            }
        }
        if ($search ne '') {
            push(@and, sub {
                     my $tagname = $_[0]->tag;
                     return defined $tagname && $tagname eq $search;
                 });
        }
        push(@or, \@and);
    }
    my $sub = sub {
        my $element = $_[0];
      orr:
        foreach my $or (@or) {
            foreach my $and (@$or) {
                if (!$and->($element)) {
                    next orr;
                }
            }
            return 1;
        }
        return 0;
    };
    return $tree->look_down($sub);
}
