#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
use feature qw(say);
use utf8;                       # thar be box drawing characters
use HTML::Tagset;
use HTML::Valid::Tagset;
use HTML::TreeBuilder;
use strictures;
use Getopt::Long;
use File::Find qw();
use Data::Dumper;


STDOUT->autoflush(1);
STDERR->autoflush(1);


BEGIN {
    updateTagsets();
}

our $opt_show_attributes;
our $opt_show_first_child;
our $opt_show_last_child;
our @opt_search;
our @opt_exclude;
our $opt_fancy;
our $opt_tree;
our $opt_theme = 'blank';
our $opt_carp_test;
our $opt_show_ancestors;
our $opt_recurse;
our $opt_list_files_only;
our $opt_files_with_matches;
our $opt_verbose = 0;
our $opt_as_html = 0;
our $opt_as_html_tags = 0;
our $opt_max_ancestors = 0;

BEGIN {
    if (grep { $_ eq "--carp" } @ARGV) {
        # This does nothing during regular runtime.
        require Carp::Always;
        import Carp::Always;
    }
}

###############################################################################

# gnu_compat disables ":s" options if a value is not supplied.

Getopt::Long::Configure("gnu_compat", "bundling", "no_ignore_case");
Getopt::Long::GetOptions(
    "s|search=s"                   => \@opt_search,
    "x|exclude=s"                  => \@opt_exclude,
    "A|ancestors|show-ancestors"   => \$opt_show_ancestors,
    "m|max-ancestors=i"            => \$opt_max_ancestors,
    "R|no-recurse"                 => sub { $opt_recurse = 0; },
    "r|recurse"                    => sub { $opt_recurse = 1; },
    "f|fancy"                      => \$opt_fancy,
    "a|attributes|show-attributes" => \$opt_show_attributes,
    "first-child|show-first-child" => \$opt_show_first_child,
    "last-child|show-last-child"   => \$opt_show_last_child,
    "t|tree"                       => \$opt_tree,
    "l|files-with-matches"         => \$opt_files_with_matches,
    "empty-anchors" => sub {
        push(@opt_search, (
            'a:not([href])',
            'a[href=""]',
            'a[href="#"]',
            'a[href="FIXME"]',
            'a[href="TODO"]',
            'a[href="PUT_URL_HERE"]',
            'a[href="PUTURLHERE"]',
        ));
    },
    "T|theme|tree-theme=s" => sub {
        my $value = $_[1];
        if ($value ne "blank" && $value ne "ascii" && $value ne "light" && $value ne "heavy") {
            die("Invalid tree theme: $value\n");
        }
        $opt_tree = 1;
    },
    'T|as-html-tags' => \$opt_as_html_tags,
    'H|as-html'      => \$opt_as_html,
    "blank" => sub { $opt_theme = "blank"; $opt_tree = 1; },
    "ascii" => sub { $opt_theme = "ascii"; $opt_tree = 1; },
    "light" => sub { $opt_theme = "light"; $opt_tree = 1; },
    "heavy" => sub { $opt_theme = "heavy"; $opt_tree = 1; },
    "carp" => sub { },          # does nothing here, but see above
    "carp-test" => \$opt_carp_test,
    "list-files-only" => \$opt_list_files_only,
    "v|verbose+" => \$opt_verbose,
    "h|help" => sub { usage(); exit 0; }
) or die("Type '$0 --help' for help.\n");

if ($opt_tree && scalar @opt_search) {
    warn("--tree and --search are incompatible.\n");
    die("Type '$0 --help' for help.\n");
}
if ($opt_tree && scalar @opt_exclude) {
    warn("--tree and --exclude are incompatible.\n");
    die("Type '$0 --help' for help.\n");
}

if ($opt_files_with_matches && !scalar @opt_search) {
    warn("--files-with-matches specified without a -s/--search selector.\n");
    die("Type '$0 --help' for help.\n");
}
if ($opt_files_with_matches && !scalar @opt_exclude) {
    warn("--files-with-matches specified without a -x/--exclude selector.\n");
    die("Type '$0 --help' for help.\n");
}

sub usage { print <<"END"; }
usage:
  htmlinspect [<option> ...] [<file> ...]
options:
  -h, --help
  -a, --[show-]attributes
  -s, --search='<search>'       search by CSS selector
  -x, --exclude='<search>'      what to exclude
  -r, --recurse                 (default if --search is not specified)
  -R, --no-recurse              (default if --search is specified)
  -A, --[show-]ancestors        only when searching
  -m, --max-ancestors=<int>
  -f, --fancy
      --[show-]first-child
      --[show-]last-child
  -t, --tree                    (not for use with -s/--search)
  -H, --as-html
  -T, --tree-theme=<theme>      blank, ascii, light, heavy
      --blank
      --ascii
      --light
      --heavy
      --carp                    show stack traces
      --list-files-only         list files that would be searched
  -l, --files-with-matches      list files containing matches with -s/--search
  -v, --verbose                 list files as they're being searched
END

###############################################################################

# replace directories with lists of files
my @files;
foreach my $arg (@ARGV) {
    if (-d $arg) {
        my $wanted = sub {
            my ($dev,$ino,$mode,$nlink,$uid,$gid);
            (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
                -f _ &&
                /^.*\.(?:html?|njk)\z/si
                && push(@files, $File::Find::name);
        };
        File::Find::find({ wanted => $wanted }, $arg);
    } else {
        push(@files, $arg);
    }
}

@ARGV = @files;

if ($opt_list_files_only) {
    say foreach @ARGV;
    exit;
}

if (!defined $opt_recurse) {
    if (scalar @opt_search) {
        $opt_recurse = 0;
    } else {
        $opt_recurse = 1;
    }
}

###############################################################################

my $tree;
my $inspector;

sub done {
    if (!defined $tree || !defined $inspector) {
        return;
    }
    $inspector->exclude($tree, @opt_exclude);
    if ($opt_files_with_matches) {
        if (scalar @opt_search) {
            foreach my $search (@opt_search) {
                if ($inspector->has($tree, $search)) {
                    print "$ARGV\n";
                    last;
                }
            }
        }
    } elsif (scalar @opt_search) {
        foreach my $search (@opt_search) {
            my @results = $inspector->search($tree, $search);
            foreach my $result (@results) {
                $inspector->inspect($result, $ARGV);
            }
        }
    } else {
        $inspector->inspect($tree, $ARGV);
    }

    $inspector = undef;
    $tree = undef;
}

my $tty;
if (!open($tty, '>', '/dev/tty')) {
    undef $tty;
} else {
    $tty->autoflush(1);
}

while (<>) {
    s{\R\z}{};
    $_ .= "\n";
    if (!defined $tree) {
        $tree = HTML::TreeBuilder::XPath->new();
        $tree->ignore_unknown(0);
    }
    if (!defined $inspector) {
        $inspector = My::HTML::Inspector->new();
        $inspector->show_ancestors($opt_show_ancestors)         if defined $opt_show_ancestors;
        $inspector->max_ancestors($opt_max_ancestors)           if defined $opt_max_ancestors;
        $inspector->show_attributes($opt_show_attributes)       if defined $opt_show_attributes;
        $inspector->show_first_child($opt_show_first_child)     if defined $opt_show_first_child;
        $inspector->show_last_child($opt_show_last_child)       if defined $opt_show_last_child;
        $inspector->tree($opt_tree)                             if defined $opt_tree;
        $inspector->theme($opt_theme)                           if defined $opt_theme;
        $inspector->fancy($opt_fancy)                           if defined $opt_fancy;
        $inspector->recurse($opt_recurse)                       if defined $opt_recurse;
        $inspector->as_html($opt_as_html)                       if defined $opt_as_html;
        $inspector->as_html_tags($opt_as_html_tags)             if defined $opt_as_html_tags;
        $inspector->files_with_matches($opt_files_with_matches) if defined $opt_files_with_matches;
    }
    $tree->parse($_);
    if (eof(\*ARGV)) {
        printf $tty ("\r%s\e[K", $ARGV) if $tty;
        done();
    }
}
printf $tty ("\r\e[K") if $tty;
done();

# if ($opt_verbose) {
#     printf STDERR ("%s...\n", $ARGV);
# }
# # required for unknown tags to work
# if ($_ !~ m{<body[^>]*>.*</body>}smi) {
#     $_ = '<body>' . $_ . '</body>';
# }
# if ($_ !~ m{<html[^>]*>.*</html>}smi) {
#     $_ = '<html>' . $_ . '</html>';
# }

package My::HTML::Inspector {
    use Class::Tiny qw(show_ancestors
                       show_first_child
                       show_last_child
                       show_attributes
                       max_ancestors
                       recurse
                       tree
                       theme
                       fancy
                       as_html
                       as_html_tags
                       files_with_matches);

    use HTML::Entities qw(encode_entities);

    INIT {
        eval 'use HTML::Selector::XPath 0.20 qw(selector_to_xpath);';
        die $@ if $@;
        eval 'use HTML::TreeBuilder::XPath;';
        die $@ if $@;
    }

    our $BOX_DRAWING;
    BEGIN {
        $BOX_DRAWING = {
            light => {
                last            => "└── ",
                not_last        => "├── ",
                parent_last     => "    ",
                parent_not_last => "│   ",
            },
            heavy => {
                last            => "┗━━ ",
                not_last        => "┣━━ ",
                parent_last     => "    ",
                parent_not_last => "┃   ",
            },
            ascii => {
                last            => "`-- ",
                not_last        => "|-- ",
                parent_last     => "    ",
                parent_not_last => "|   ",
            },
            blank => {
                last            => "    ",
                not_last        => "    ",
                parent_last     => "    ",
                parent_not_last => "    ",
            },
        };
    }

    our %filename_printed;

    sub inspect {
        my ($self, $element, $filename, %args) = @_;
        if (!ref $element) {
            return;
        }

        my $element_string = $self->element_string($element);

        my $index     = $args{index};
        my $nchildren = $args{nchildren};
        my $level     = $args{level} // 0;
        my $parents   = $args{parents} // [];
        my $prefix    = $args{prefix} // "";

        my @parents = @$parents;
        my $parents_string = join("", map { "$_ > " } @$parents);

        if ($self->as_html) {
            if (!$filename_printed{$filename}) {
                print "$filename:\n";
                $filename_printed{$filename} = 1;
            }

        } elsif ($self->fancy) {
            if (!$filename_printed{$filename}) {
                print "$filename:\n";
                $filename_printed{$filename} = 1;
            }
            print " " x 4;
        } else {
            print "$filename: ";
        }

        my $newprefix;
        if ($self->tree) {
            if ($self->theme ne "blank") {
                my $drawing;
                if ($level) {
                    $drawing = ($index == $nchildren - 1) ? $BOX_DRAWING->{$self->theme}->{last} : $BOX_DRAWING->{$self->theme}->{not_last};
                } else {
                    $drawing = "";
                }
                print($prefix, $drawing);
                $newprefix = $prefix;
                if ($level) {
                    $newprefix .= (($index == $nchildren - 1) ? $BOX_DRAWING->{$self->theme}->{parent_last} : $BOX_DRAWING->{$self->theme}->{parent_not_last});
                }
            } else {
                print(" " x (4 * $level));
            }
        } else {
            if (!$self->show_ancestors) {
                print($parents_string);
            }
        }

        if ($self->show_ancestors) {
            my $ancestors = "";
            my $count = 0;
            for (my $parent = $element->parent;
                 $parent;
                 $parent = $parent->parent) {
                if ($self->max_ancestors && $count >= $self->max_ancestors) {
                    last;
                }
                $ancestors = $self->element_string($parent) . " " . $ancestors;
                $count += 1;
            }
            print($ancestors);
        }

        print($element_string, "\n");

        if ($self->recurse && !$self->as_html_tags && !$self->as_html) {
            my @children = grep { ref $_ } $element->content_list();
            my $index = 0;
            my $nchildren = scalar @children;
            my %args;
            if ($self->tree && $self->theme ne "blank") {
                $args{prefix} = $newprefix;
            }
            foreach my $child (@children) {
                $self->inspect($child,
                               $filename,
                               %args,
                               parents => [@parents, $element_string],
                               index => $index,
                               nchildren => $nchildren,
                               level => $level + 1);
                $index += 1;
            }
        }
    }

    sub element_string_html {
        my ($self, $element) = @_;
        my $tagname = $element->tag;

        my $result = '<' . $tagname;

        foreach my $attr_name ($element->all_external_attr_names) {
            my $attr_value = $element->attr($attr_name);
            $result .= ' ' . $attr_name;

            if ($attr_name =~ m{^data-} || $attr_name eq 'checked' || $attr_name eq 'selected' || $attr_name eq 'disabled') {
                if ($attr_name eq $attr_value) {
                    next;
                }
            }
            if ($attr_name ne 'href') {
                if ($attr_value eq '') {
                    next;
                }
            }

            $result .= '="' . encode_entities($attr_value) . '"';
        }
        $result .= '>';

        return $result;
    }

    sub element_string {
        my ($self, $element) = @_;

        if ($self->as_html) {
            my $html = $element->as_HTML;
            $html =~ s{^}{    }gm;
            return $html;
        }

        return $self->element_string_html($element) if $self->as_html_tags;

        my $tagname = $element->tag;

        my $result = $tagname;

        my $class = $element->attr('class');
        my @class = defined $class ? split(' ', $class) : ();
        foreach my $class (@class) {
            $result .= "." . $class;
        }

        my $id = $element->attr('id');
        if (defined $id) {
            $result .= "#" . $id;
        }

        if ($self->show_attributes) {
            my @attr_names = $element->all_external_attr_names;
            @attr_names = sort { lc($a) cmp lc($b) } grep { $_ ne "class" && $_ ne "id" && $_ ne "/" } @attr_names;
            foreach my $attr_name (@attr_names) {
                $result .= sprintf("[%s]", $attr_name);
            }
        }

        my @left  = grep { ref $_ } $element->left;
        my @right = grep { ref $_ } $element->right;
        my $is_first_child = !scalar @left;
        my $is_last_child  = !scalar @right;

        if ($self->show_first_child && $is_first_child) {
            $result .= ":first-child";
        }
        if ($self->show_last_child && $is_last_child) {
            $result .= ":last-child";
        }

        return $result;
    }

    # Delete nodes matching the specified selectors() from
    # the document.  This excludes them and their ancestors
    # from searches.
    sub exclude {
        my ($self, $tree, @exclude_selector) = @_;
        $self->{exclude_address} = {};
        $self->{exclude_node} = [];
        foreach my $selector (@exclude_selector) {
            my $xpath = selector_to_xpath($selector, './');
            my @exclude_nodes = $tree->findnodes($xpath);
            foreach my $node (@exclude_nodes) {
                $node->delete();
            }
        }
    }

    sub search {
        my ($self, $tree, $search) = @_;
        my $xpath = selector_to_xpath($search, './');
        my @results = $tree->findnodes($xpath);
        return @results;
    }

    sub has {
        my ($self, $tree, $search) = @_;
        return scalar $self->search($tree, $search);
    }
};
