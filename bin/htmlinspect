#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

use HTML::TreeBuilder;
use Getopt::Long;

our $show_attributes;
our $show_first_child;
our $show_last_child;

Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions(
    "a|attributes|show-attributes" => \$show_attributes,
    "first-child|show-first-child" => \$show_first_child,
    "last-child|show-last-child"   => \$show_last_child,
    "h|help" => sub { usage(); exit 0; }
) or die("Type '$0 --help' for help.\n");

sub usage { print <<"END"; }
usage:
  htmlinspect [<option> ...] [<file> ...]
options:
  -h, --help
  -a, --show-attributes
END

local $/ = undef;
while (<>) {
    my $tree = HTML::TreeBuilder->new();
    $tree->parse($_);
    $tree->eof();
    $tree->elementify();
    htmlinspect($tree, $ARGV);
}

sub htmlinspect {
    my ($element, $filename, %args) = @_;
    my $tagname = eval { $element->tag };
    my $index     = $args{index};
    my $nchildren = $args{nchildren};
    if (defined $tagname) {
        my $class = $element->attr('class');
        my $id    = $element->attr('id');
        my @class = defined $class ? split(' ', $class) : ();

        my $suffix = "";
        $suffix .= ".$_" foreach @class;
        $suffix .= "#$id" if defined $id;

        if ($show_attributes) {
            my @attr_names = sort { lc($a) cmp lc($b) } grep { $_ ne "class" && $_ ne "id" } $element->all_external_attr_names;
            foreach my $attr_name (@attr_names) {
                $suffix .= sprintf("[%s]", $attr_name);
            }
        }
        if (defined $index) {
            if ($show_first_child && $index == 0) {
                $suffix .= ":first-child";
            }
            if ($show_last_child && $index == $nchildren - 1) {
                $suffix .= ":last-child";
            }
        }

        my $parents = $args{parents} // [];
        my @parents = @$parents;
        my $parents_string = join("", map { "$_ " } @$parents);
        say sprintf("%s: %s%s", $filename, $parents_string, $tagname . $suffix);
        my @children = $element->content_list();

        my $index = 0;
        my $nchildren = scalar @children;
        foreach my $child (@children) {
            htmlinspect($child, $filename,
                        parents => [@parents, $tagname . $suffix],
                        index => $index,
                        nchildren => $nchildren);
            $index += 1;
        }
    }
}
