#!/usr/bin/env perl
#
# spgrep - print matching lines, then print non-matching lines
#
use warnings;
use strict;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our @patternStrings;
our $ignoreCase = 0;
our $wordRegexp = 0;
our $lineRegexp = 0;
our $fixedStrings = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'w|word-regexp'             => \$wordRegexp,
    'x|line-regexp'             => \$lineRegexp,
    'i|ignore-case'             => \$ignoreCase,
    'F|fixed-strings'           => \$fixedStrings,
    'e|regexp|pattern=s'        => \@patternStrings,
    'h|help'                    => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -h, --help
    ...
END

###############################################################################

if (!scalar @patternStrings) {
    if (!scalar @ARGV) {
        die("$PROGNAME: no pattern specified\n");
    }
    my $patternString = shift(@ARGV);
    @patternStrings = ($patternString);
}

my $grep = My::SplitGrep->new();
$grep->{ignoreCase}   = $ignoreCase;
$grep->{wordRegexp}   = $wordRegexp;
$grep->{lineRegexp}   = $lineRegexp;
$grep->{fixedStrings} = $fixedStrings;
$grep->{patternStrings}     = \@patternStrings;
$grep->run(\*ARGV);

###############################################################################

package My::SplitGrep {
    use feature qw(say);
    sub new {
        my ($class, %args) = @_;
        my $self = bless({}, $class);
        $self->{patternStrings} = [];
        return $self;
        $self->{nonMatchingLines} = [];
    }
    sub run {
        my ($self, $fh) = @_;
        $self->buildPatterns();
      line:
        while (<$fh>) {
            s{\R\z}{};
          regexp:
            foreach my $pattern (@{$self->{patterns}}) {
                my $regexp = $pattern->{regexp};
                if ($_ =~ $regexp) {
                    say $_;
                    next line;
                } else {
                    push(@{$self->{nonMatchingLines}}, $_);
                }
            }
        }
        foreach my $line (@{$self->{nonMatchingLines}}) {
            say $line;
        }
    }
    sub buildPatterns {
        my ($self) = @_;
        $self->{patterns} = [];
        foreach my $patternString (@{$self->{patternStrings}}) {
            my $flags = '';
            $flags .= 'i' if $self->{ignoreCase};

            my $regexp = $patternString;
            if ($self->{fixedStrings}) {
                $regexp = quotemeta($regexp);
            }
            if ($self->{lineRegexp}) {
                $regexp = '^' . $regexp . '$';
            } elsif ($self->{wordRegexp}) {
                $regexp = '\\b' . $regexp . '\\b';
            }
            if ($flags ne '') {
                $regexp = sprintf('(?%s:%s)', $flags, $regexp);
            }

            push(@{$self->{patterns}}, {
                regexp => qr{$regexp},
                matchingLines => [],
            });
        }
    }
};
