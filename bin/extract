#!/usr/bin/env bash
set -o pipefail
set -o nounset
set -o errexit
# set -o xtrace

PROGNAME="$(basename "$0")"

main () {
    local verbose=0
    local dry_run=0

    get-options "$@"
    shift $((OPTIND - 1))

    local file
    for file in "$@" ; do
        extract-file "${file}"
    done
}

extract-file () {
    local file="$1"
    if [[ ! -e "${file}" ]] ; then
        >&2 echo "${PROGNAME}: ${file}: not found"
        return 1
    fi
    if [[ -d "${file}" ]] ; then
        >&2 echo "${PROGNAME}: ${file}: is a directory"
        return 1
    fi
    case "${file}" in
        *.zip|*.ZIP)
            extract-zip-file "${file}"
            ;;
        *)
            >&2 echo "${PROGNAME}: ${file}: don't know how to extract yet"
            return 1
            ;;
    esac
}

extract-zip-file () {
    local file="$1"
    local dir="${file%.[Zz][Ii][Pp]}"
    if ! safe-for-extraction "${dir}" ; then
        return 1
    fi
    if type -P unzip >/dev/null 2>/dev/null ; then
        unzip "${file}" -d "${dir}"
    fi
}

safe-for-extraction () {
    local dir="$1"
    if [[ ! -e "${dir}" ]] ; then
        # safe: directory does not exist
        return 0
    fi
    if [[ ! -d "${dir}" ]] ; then
        >&2 echo "${PROGNAME}: ${dir}: is not a directory"
        return 1
    fi
    shopt -s nullglob
    local file
    for file in "${dir}"/* "${dir}"/.* ; do
        case "${file}" in
            "${dir}"/.) : ;;
            "${dir}"/..) : ;;
            *)
                shopt -u nullglob
                >&2 echo "${PROGNAME}: ${dir}: directory exists and is not empty"
                return 1
                ;;
        esac
    done
    shopt -u nullglob
    # safe: directory exists and is empty
    return 0
}

get-options () {
    local OPTION
    while getopts 'hvn-:' OPTION ; do
        check-long-option || break
        case "${OPTION}" in
            'h'|'help')
                usage
                exit 0
                ;;
            'v'|'verbose')
                verbose=$((verbose + 1))
                ;;
            'n'|'dry-run')
                dry_run=1
                ;;
            '?')
                # short option invalid or missing argument
                >&2 echo "Type '${PROGNAME} --help' for more information."
                exit 1
                ;;
            *)
                # invalid long option
                >&2 echo "${PROGNAME}: unknown option -- ${OPTION}"
                >&2 echo "Type '${PROGNAME} --help' for more information."
                exit 1
                ;;
        esac
    done
}

usage () { cat <<EOF; }
usage:
    ${PROGNAME} [<option> ...] [--] [<filename> ...]
options:
    -h, --help              display this message
    -v, --verbose           verbosity
    -n, --dry-run           dry run
EOF

###############################################################################
# poor man's long options for bash

check-long-option () {
    if [[ "${OPTION}" = "-" ]] ; then
        if [[ "${OPTARG}" == "" ]] ; then
            # argument is '--' by itself; terminate option parsing
            return 1
        fi
        OPTION="${OPTARG}"
        unset OPTARG
        case "${OPTION}" in
            *=*)
                OPTARG="${OPTION#*=}"
                OPTION="${OPTION%%=*}"
                ;;
        esac
    fi
    return 0
}

require-argument () {
    # does nothing for short options
    if [[ "${OPTION}" = ? ]] ; then return ; fi

    # retrieves OPTARG and updates OPTIND for long option arguments
    if [[ ! -v OPTARG ]] ; then
        if (( OPTIND > $# )) ; then # long option missing argument
            >&2 echo "${PROGNAME}: option requires an argument -- ${OPTION}"
            >&2 echo "Type '${PROGNAME} --help' for more information."
            exit 1
        fi
        OPTARG="${@:OPTIND:1}"
        OPTIND=$((OPTIND + 1))
    fi
}

###############################################################################

main "$@"
