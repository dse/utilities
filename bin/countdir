#!/usr/bin/env perl
use warnings;
use strict;
use feature qw(state);
use File::Basename qw(basename dirname);
use Getopt::Long;
use POSIX qw(floor);
use Time::HiRes qw(gettimeofday);
our $PROGNAME = basename($0);
STDERR->autoflush(1) if -t 2;

our $VERSION = "0.000000";
$VERSION = eval $VERSION;

our $basename = 0;
our $count_size = 0;
our $count_blocks = 0;

Getopt::Long::Configure(qw(gnu_getopt no_ignore_case auto_version auto_help));
Getopt::Long::GetOptions(
    'help|?'     => sub { usage(); exit(0); },
    'b|basename' => \$basename,
    's|size'     => \$count_size,
    'blocks'     => \$count_blocks,
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [-b|--basename] [<filename> ...]
END

our %count;
our %count_all;
our %size_count;
our %size_count_all;
our %blocks_count;
our %blocks_count_all;
while (<>) {
    print STDERR ("$.\r") if -t 2 && tick();
    s{\R\z}{};
    next if $_ eq '';
    my ($size, $blocks);
    ($size, $blocks) = (stat($_))[7, 12] if $count_size || $count_blocks;
    $_ = dirname($_);
    my $counted = $basename ? basename($_) : $_;
    $count{$counted} += 1;
    $size_count{$counted} += $size if $count_size && defined $size;
    $blocks_count{$counted} += $blocks if $count_blocks && defined $blocks;
    while (1) {
        my $counted = $basename ? basename($_) : $_;
        $count_all{$counted} += 1;
        $size_count_all{$counted} += $size if $count_size && defined $size;
        $blocks_count_all{$counted} += $blocks if $count_blocks && defined $blocks;
        my $next = dirname($_);
        last if $next eq $_;
        $_ = $next;
    }
}
print STDERR ("\e[K") if -t 2;

foreach my $dir (sort keys %count) {
    printf("%7d %7d ", $count{$dir} // -1, $count_all{$dir} // -1);
    printf("%15d %15d ", $size_count{$dir} // -1, $size_count_all{$dir} // -1) if $count_size;
    printf("%11d %11d ", $blocks_count{$dir} // -1, $blocks_count_all{$dir} // -1) if $count_blocks;
    print($dir, "\n");
}

sub tick {
    state $last = 0;
    my $now = floor(gettimeofday() * 10);
    my $retval = $last != $now;
    $last = $now;
    return $retval;
}
