#!/usr/bin/env perl
use warnings;
use strict;

use POSIX qw(floor);
use Text::Tabs qw(expand);
use Text::Wrap qw(wrap);

if (scalar @ARGV < 2) {
    die("not enough arguments\n");
}

my @filenames = @ARGV;

my @fh;
foreach my $filename (@filenames) {
    my $fh;
    open($fh, '<', $filename) or die("$filename: $!\n");
    push(@fh, $fh);
}

my $totalColumns = columns();
my $columns = floor($totalColumns / scalar(@filenames)) - 1;

my @allWrapped;
foreach my $filename (@filenames) {
    my $wrapped = wrap('', '', $filename);
    my @wrapped = split(/\r?\n/, $wrapped);
    push(@allWrapped, \@wrapped);
}

push(@$_, ('-' x $columns)) foreach @allWrapped;

while (grep { scalar(@$_) } @allWrapped) {
    my @cols = map { shift(@$_) // '' } @allWrapped;
    print(join('|', map { sprintf('%-*s', $columns, $_) } @cols), "\n");
}

my @lineArrays = map { [] } @filenames;
while (1) {
    foreach my $i (0 .. $#filenames) {
        my @lines;
        if (!scalar @{$lineArrays[$i]}) {
            $lines[$i] = nextLine($fh[$i]);
            if (defined $lines[$i]) {
                my @folded = fold($lines[$i]);
                push(@{$lineArrays[$i]}, @folded);
            }
        }
        $fh[$i] = undef if !defined $lines[$i];
    }
    last if !grep { scalar(@$_) } @lineArrays;
    foreach my $i (0 .. $#filenames) {
        if ($i == $#filenames) {
            if (scalar @{$lineArrays[$i]}) {
                printf("%s\n", shift(@{$lineArrays[$i]}));
            } else {
                printf("\n");
            }
        } else {
            if (scalar @{$lineArrays[$i]}) {
                printf('%-*s|', $columns, shift(@{$lineArrays[$i]}));
            } else {
                printf('%-*s|', $columns, '');
            }
        }
    }
}

sub fold {
    my $line = shift;
    my @result;
    while (length($line) > $columns) {
        push(@result, substr($line, 0, $columns));
        $line = substr($line, $columns);
    }
    return (@result, $line);
}

sub nextLine {
    my $fh = shift;
    return if !defined $fh;
    my $line = <$fh>;
    if (!defined $line) {
        close($fh);
        $fh = undef;
        return;
    }
    $line =~ s{\R\z}{};
    $line = expand($line);
    return $line;
}

our $hasIoctl;
our $hasTermSize;
BEGIN {
    eval {
        require 'sys/ioctl.ph';
        $hasIoctl = 1;
    };
    eval {
        require Term::Size;
        $hasTermSize = 1;
    };
}

sub columns {
    if (exists $ENV{COLS}) {
        return $ENV{COLS};
    }
    if (exists $ENV{COLUMNS}) {
        return $ENV{COLUMNS};
    }
    if ($hasTermSize) {
        my $columns = columnsFromTermSize();
        return $columns if $columns;
    }
    if ($hasIoctl) {
        my $columns = columnsFromIoctl();
        return $columns if $columns;
    }
    my $columns = columnsFromTput();
    return $columns if $columns;
}

sub columnsFromTermSize {
    my $tty;
    return unless open($tty, '+</dev/tty');
    my $chars = Term::Size::chars($tty);
    return $chars if $chars;
    return;
}

sub columnsFromIoctl {
    return unless defined &TIOCGWINSZ;
    my $tty;
    return unless open($tty, '+</dev/tty');
    my $winsize;
    return unless ioctl($tty, &TIOCGWINSZ, $winsize = '');
    my ($row, $col, $xpixel, $ypixel) = unpack('S4', $winsize);
    return $col if $col;
    return;
}

sub columnsFromTput {
    my $cols = `tput cols`;
    $cols =~ s{\R\z}{};
    return $cols if $cols;
    return;
}
