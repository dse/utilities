#!/usr/bin/env perl
use warnings;
use strict;
use v5.14.0;                # required for srand() to return the seed.

use utf8;
use open IO => ":locale";
use Getopt::Long;

use POSIX qw(acos asin atan ceil cosh floor fmod frexp ldexp log10
             modf pow sinh tan tanh);

BEGIN {
    eval {
        import POSIX qw(acosh asinh atanh cbrt copysign expm1 fdim fma fmax fmin
                        hypot ilogb Inf j0 j1 jn y0 y1 yn lgamma log1p log2
                        logb NaN nan nextafter nexttoward remainder remquo
                        round scalbn tgamma trunc);
    };
}

use Math::Trig;
use Math::Trig qw(:pi);

our $opt_format;
our $opt_curly_brackets_only;
our $opt_files;

# ! operator
# " quote
# # comment (candidate)
# $ sigil
# % operator
# & operator
# ' quote
# ( paren
# ) paren
# * operator
# + operator
# , operator
# - operator
# . operator
# / operator
# : operator
# ; statement (candidate)
# < = > ? operators
# @ sigil
# [ paren
# \ reference
# ] paren
# ^ operator
# _ identifier
# ` shell quote
# { paren
# | operator
# } paren
# ~ operator

sub opt_module {
    # -m<module>              => use <module> ();
    # -m-<module>             => no  <module> ();
    # -m<module>=arg[,arg]... => use <module> split(/,/,q{arg,arg});
    # -M<module>              => use <module>;
    # -M-<module>             => no  <module>;
    # -M<module>=arg[,arg]... => use <module> split(/,/,q{arg,arg});
    my ($option, $module) = @_;
    my $use = ($module =~ s{^-}{}) ? "no" : "use";
    if ($module =~ s{=(.*)$}{}) {
        my $args = $1;
        eval "$use ${module} split(/,/, q{${args}};";
    } elsif ($option eq "M") {
        eval "$use ${module};";
    } else {
        eval "$use ${module} ();";
    }
}

Getopt::Long::Configure("bundling", "gnu_compat", "no_ignore_case");
Getopt::Long::GetOptions(
    "c|curly|curly-brackets-only" => \$opt_curly_brackets_only,
    "p|printf|format=s"           => \$opt_format,
    "f|files"                     => \$opt_files,
    "m=s"                         => \&opt_module,
    "M=s"                         => \&opt_module,
    "h|help" => sub { usage(); exit 0; }
) or die("Type '$0 --help' for help.\n");

sub usage { print <<"END"; }
usage:
  $0 [<option> ...]                             read from stdin
  $0 [<option> ...] <expr> ...                  evaluate expressions
  $0 [<option> ...] --files [<filename> ...]    read from specified files
options:
  -p, --printf, --format=<format>               examples:    %d    %.3f
  -f, --files
  -c, --curly, --curly-brackets-only
  -h, --help
  -m<module>, -M<module>                        same as in Perl itself
END

if ($opt_files) {
    magic_filehandle();
} else {
    if (scalar @ARGV) {
        foreach (@ARGV) {
            if ($opt_curly_brackets_only) {
                curly_brackets();
            } elsif (m{[\{\}]}) {
                # If any {...} expressions are found, replace them.
                curly_brackets();
            } else {
                # Treat the whole line as an expression.
                whole_line();
            }
            print "\n";
         }
    } else {
        magic_filehandle();
    }
}

sub magic_filehandle {
    if ($opt_curly_brackets_only) {
        # Only replace {...} expressions.
        while (<>) {
            curly_brackets();
        }
    } else {
        # Magic behavior goes here.
        my $first_line = <>;
        while (<>) {
            # If we've reached this point, there's more than one line.
            # Only replace {...} expressions.
            if (defined $first_line) {
                for ($first_line) {
                    curly_brackets();
                }
                $first_line = undef;
            }
            curly_brackets();
        }
        if (defined $first_line) {
            # If we've reached this point, there's only one line.
            for ($first_line) {
                if (m{[\{\}]}) {
                    # If any {...} expressions are found, replace them.
                    curly_brackets();
                } else {
                    # Treat the whole line as an expression.
                    whole_line();
                }
            }
        }
    }
}

sub curly_brackets {
    s{\{([^\{\}\r\n]*?)(?:\#([^\#]*))?\}}
     {result_of($1, $2)}ge;
    print $_;
}

sub whole_line {
    s{\R\z}{};                  # safer chomp
    my $chewed = $& // "";
    $_ = result_of($_);
    print $_ . $chewed;
}

sub result_of {
    my ($string, $format) = @_;
    $format //= $opt_format;
    my $orig_string = $string;
    $string =~ s{\N{MINUS SIGN}}{-}g;
    $string =~ s{\N{MULTIPLICATION SIGN}}{*}g;
    $string =~ s{\N{DIVISION SIGN}}{/}g;
    my $result = eval $string;
    if ($@) {
        warn $@;
        return $string;
    }
    if (!defined $result) {
        return $string;
    }
    if (defined $format) {
        $result = sprintf($format, $result);
    }
    return $result;
}

=head1 NAME

perlcalc - A command line calculator that uses Perl.

=head1 SYNOPSIS

    perlcalc [<option> ...] [<expr> ...]
    perlcalc [<option> ...] --files [<filename> ...]

=head1 EXAMPLES

Expression arguments:

    $ perlcalc '5 * 5280' '5 * 1.609344'
    26400
    8.04672

Expressions in curly braces:

    $ perlcalc '5 miles is {5 * 5280} feet, or {5 * 1.609344} kilometers.'
    5 miles is 26400 feet, or 8.04672 kilometers.

Sample file:

    $ cat expressions.txt
    5 miles is {5 * 5280} feet, or {5 * 1.609344} kilometers.

Standard input:

    $ perlcalc < expressions.txt
    5 miles is 26400 feet, or 8.04672 kilometers.

    $ echo '5 * 5280' | perlcalc
    26400

Interpret arguments as files:

    $ perlcalc --files expressions.txt
    5 miles is 26400 feet, or 8.04672 kilometers.

printf-style formatting:

    $ echo '<{5 * 1.609344}>' | perlcalc -p '%8.3f'
    <   8.047>

    $ echo '<{5 * 1.609344#%8.3f}>' | perlcalc
    <   8.047>

=head1 DESCRIPTION

perlcalc is a utility program that uses Perl to evaluate expressions
and print the resultant values.  Its primary purpose is to be a
quick-and-dirty command line accessible calculator.

Running perlcalc with no arguments reads lines from standard input,
and replaces any expressions in curly brackets with their values:

    $ cat expressions.txt
    5 miles is {5 * 5280} feet, or {5 * 1.609344} kilometers.

    $ perlcalc < expressions.txt
    5 miles is 26400 feet, or 8.04672 kilometers.

If standard input contains no more than one line, and no expressions
in curly brackets are found, the contents in their entirety are
treated as an expression:

    $ echo '5 * 5280' | perlcalc
    26400

Running perlcalc with one or more non-option arguments evaluates each
argument as an expression in Perl and prints its result.  This causes
standard input to not be read.

    $ perlcalc '5 * 5280' '5 * 1.609344'
    26400
    8.04672

Each argument containing a pair of curly braces has its
curly-bracketed subexpressions evaluated:

    $ perlcalc '5 miles is {5 * 5280} feet, or {5 * 1.609344} kilometers.'
    5 miles is 26400 feet, or 8.04672 kilometers.

Use the C<--files> option to treat any non-option argument(s) as
filename(s) instead of expression(s):

    $ perlcalc --files expressions.txt
    5 miles is 26400 feet, or 8.04672 kilometers.

=head1 ADDED BONUSES

Within expressions it is about to evaluate, perlcalc converts the
following characters to their respective ASCII character counterparts
before evaluating them:

    From                          To
    --------------------------    ------------------------
    U+2212 MINUS SIGN             -    U+002D HYPHEN-MINUS
    U+00D7 MULTIPLICATION SIGN    *    U+002A ASTERISK
    U+00F7 DIVISION SIGN          /    U+002F SOLIDUS

=head1 MATHEMATICAL FUNCTIONS

Because perlcalc was primarily built for doing quick mathematical
calculations, while any built-in Perl function can be used I will
provide a list of built-in Perl mathematical functions as a
convenience.  See perlfunc for details.

    abs            Returns the absolute value of its argument.
    atan2(Y, X)    Returns the arctangent of Y/X.  (from -PI to PI)
    cos            Returns the cosine of its argument in radians.
    exp            Returns e to the power of its argument.
    hex            Converts its hexadecimal string argument to decimal,
                   returning the result.
    int            Returns the integer portion of its argument.
                   Use floor, ceil, or --format instead.  See perlcalc.
    log            Returns the natural logarithm of its argument.
    oct            Converts its octal string argument to decimal, returning
                   the result.
    rand           Returns a pseudorandom fractional nubmer >= 0 and less than
                   its argument (or less than 1).
    sin            Returns the sine of its argument in radians.
    sqrt           Returns the positive square root of its argument.
    srand          Sets or returns the random seed for the rand() function.

The following functions from the POSIX module are imported:

    acos           The arcus cosine.
    acosh          The hyperbolic arcus cosine.
    asin           The arcus sine.
    asinh          The hyperbolic arcus sine.
    atan           The arcus tangent.
    atanh          The hyperbolic arcus tangent.
    cbrt           The cube root.
    ceil           The smallest integer value >= to its argument.
    cosh           The hyperbolic cosine.
    copysign       Returns x, but with the sign of y.
    expm1          Equivalent to exp(x) - 1, but more precise for small args.
    floor          The largest integer value <= to its argument.
    fdim           Positive difference.  x > y ? x - y : 0.
    fma            Fused multiply-add.  x * y + z.
    fmax           Maximum of x and y, but if either is NaN returns the other.
    fmin           Minimum of x and y, but if either is NaN returns the other.
    fmod           Remainder:  x - trunc(x / y) * y
    frexp          Return the mantissa and exponent of a fp number.
    hypot          sqrt(x*x + y*y), more stable on large or small args.
    ilogb          Integer binary logarithm.
    Inf            infinity, as a constant.
    j0, j1, jn,
    y0, y1, yn     The Bessel function of the first kind of the order zero.
    ldexp          Multiply fp number with a power of two.
    lgamma         The logarithm of the gamma function.
    log1p          log(1 + x) but more stable for small arguments.
    log2           Base 2 logarithm.
    logb           Integer binary logarithm.
    log10          Base 10 logarithm.
    modf           Integer and fractional parts of a fp number.
    NaN            not-a-number, as a constant.
    nan            The function that returns NaN.
    nextafter      Next representable fp number after x in the direction of y.
    nexttoward     Same as nextafter, but potentially more accurate.
    pow            Computes x raised to the power of y.  (Same as the ** op.)
    remainder      Remainder:  x - closest-integer(x / y) * y
    remquo         Like remainder, also returns low-order bits of the quotient.
    round          Return the integer nearest its argument, but as a fp.
    scalbn         Returns x * 2 ** y.
    sinh           The hyperbolic sine.
    tan            The tangent of its argument, in radians.
    tanh           The hyperbolic tangent.
    tgamma         The Gamma function.
    trunc          Returns the integer toward zero from its argument.

The following functions and constants from the Math::Trig module are
imported:

    csc, cosec, sec, cot, cotan              Cofunctions of sin, cos, tan
    acsc, acosec, asec, acot, acotan         Arcus cofunctions of sin, cos, tan
    csch, cosech, sech, coth, cotanh         Cofunctions of sinh, cosh, tanh
    asinh, acosh, atanh                      Area functions of sinh, cosh, tanh
    acsch, acosech, asech, acoth, acotanh    Area cofunctions of "
    pi, pi2, pi4, pip2, pip4                 pi, pi * 2, pi * 4, pi / 2, pi / 4
    deg2rad, grad2rad, rad2deg,
    grad2deg, deg2grad, rad2grad             Conversions between deg, rad, grad
    rad2rad, deg2deg, grad2grad              Wrapping functions

Math::Trig's C<:radial> convesions between cartesian, spherical, and
cylindrical coordinates are not imported by default; neither are its
C<:great_circle> functions.  Use C<-MMath::Trig=:radial> and/or
C<-MMath::Trig=:great_circle> to import them.

=head1 OPTIONS

=over 4

=item -c, --curly, --curly-brackets-only

Only evaluate expressions inside curly bracket pairs, even if there's
only one line of standard input.

    $ echo '5 * 5280' | perlcalc -c
    5 * 5280

=item -p, --printf, --format=<format>

Format each expression's value using sprintf, with the specified
format string.

    $ echo '5 * 1.609344' | perlcalc -p '%d'
    8

    $ echo '5 * 1.609344' | perlcalc -p '%.3f'
    8.047

    $ echo '<{5 * 1.609344}>' | perlcalc -p '%8.3f'
    <   8.047>

    $ echo '{5 * 1.609344}' | perlcalc -p '<%8.3f>'
    <   8.047>

=item -f, --files

Interpret each non-option argument as a filename whose contents to
read, instead of as an expression to evaluate.

    $ perlcalc --files expressions.txt
    5 miles is 26400 feet, or 8.04672 kilometers.

=item -mE<lt>moduleE<gt>

Execute C<use E<lt>moduleE<gt> ();> before evaluating expressions.
Same as Perl itself.

=item -ME<lt>moduleE<gt>

Execute C<use E<lt>moduleE<gt>;> before evaluating expressions.
Same as Perl itself.

=back

=head1 AUTHOR

Darren Embry, C<dse at webonastick dot com>

=cut
