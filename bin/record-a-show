#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

use Getopt::Long;
use Regexp::Common qw(number);
use Date::Parse qw(str2time);
use File::Basename qw(dirname);
use File::Path qw(make_path);
use URI;
use POSIX qw(strftime);

my $url;
my $stationName;
my $programName;
my $maxTime;
my $date;
my $suffix;

sub usage { print <<END; }
usage:
    record-a-show [<option> ...]
options:
    -u, --url=<url>
    -s, --station=<station>
    -p, --program=<program>
    -t, --maxtime='<number> seconds|minutes|hours'
    -d, --date=<date>            file under specified <date>, not today
        --suffix=<suffix>        append <suffix> to recorded filename
        --test                   append 'test'
        --tomorrow               file under tomorrow's date, not today
END

Getopt::Long::Configure('bundling', 'gnu_compat');
Getopt::Long::GetOptions(
    'u|url=s'          => \$url,
    's|station=s'      => \$stationName,
    'p|show|program=s' => \$programName,
    't|time|maxtime=s' => \$maxTime,
    'd|date=s'         => \$date,
    'x|suffix=s'       => \$suffix,
    'test'             => sub { $suffix = 'test'; },
    'tomorrow'         => sub { $date = 'tomorrow'; },
    'h|help'           => sub { usage(); exit(0); },
) or die("Type '$0 --help' for help.\n");

my @remainder;
foreach my $arg (@ARGV) {
    if ($arg =~ m{://}) {
        $url = $arg;
    } elsif (defined parseTimeArgument($arg)) {
        $maxTime = $arg;
    } elsif ($arg eq 'tomorrow') {
        $date = 'tomorrow';
    } elsif ($arg eq 'test') {
        $suffix = 'test';
    } else {
        push(@remainder, @ARGV);
    }
}

if (!defined $url) {
    die("--url is required\n");
}
if (!defined $stationName) {
    die("--station is required\n");
}
if (!defined $programName) {
    die("--program is required\n");
}
if (!defined $maxTime) {
    die("--time is required\n");
}

if (!defined $date) {
    $date = strftime('%Y-%m-%d', localtime());
} else {
    my $time_t = str2time($date);
    if (!defined $date) {
        die("invalid date: $date\n");
    }
    $date = strftime('%Y-%m-%d', localtime($time_t));
}

{
    my $result = parseTimeArgument($maxTime);
    if (!defined $result) {
        die("invalid time specification '$maxTime'\n");
    }
    $maxTime = $result;
}

my $filename = sprintf('%s/record-a-show/%s/%s/%s%s.nut',
                       $ENV{HOME},
                       $stationName,
                       $programName,
                       $date,
                       defined $suffix ? "-$suffix" : '');

make_path(dirname($filename));
my @cmd = ('ffmpeg', '-y',
           '-loglevel', 'warning',
           '-i', $url, '-t', $maxTime, $filename);

warn("Executing: @cmd\n");
exec(@cmd);

sub parseTimeArgument {
    my ($arg) = @_;
    if ($arg =~ m{^($RE{num}{real})\s*(minutes?|mins?|m)$}) {
        return 0 + $1 * 60;
    } elsif ($arg =~ m{^($RE{num}{real})\s*(hours?|hrs?|h)$}) {
        return 0 + $1 * 3600;
    } elsif ($arg =~ m{^($RE{num}{real})\s*(seconds?|secs?|s)$}) {
        return 0 + $1;
    } else {
        return;
    }
}
