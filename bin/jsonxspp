#!/usr/bin/env perl
# pretty-print JSON using JSON::XS
use warnings;
use strict;
use open qw(locale);
use v5.10.0;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
our %exclude;
our %timestamp;
our $clean;
our $expand;

#------------------------------------------------------------------------------
use Getopt::Long qw();
Getopt::Long::Configure(qw(bundling gnu_compat no_ignore_case));
Getopt::Long::GetOptions(
    "X|expand-json"  => \$expand,
    "x|exclude=s"    => sub { $exclude{$_[1]} = 1; },
    "t|timestamp=s"  => sub { $timestamp{$_[1]} = 1; },
    "c|clean"        => \$clean,
    "h|help"         => sub { usage(); exit(0); },
) or die("Type '$0 --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    jsonxspp [<file> ...]
options:
    -x, --exclude=<key>
    -t, --timestamp=<key>
    -c, --clean
    -h, --help
END

###############################################################################

use JSON::XS qw();
use POSIX qw(strftime);
use Data::Dumper qw(Dumper);

my $json = JSON::XS->new()->pretty(1)->canonical(1);

local $/ = undef;
while (<>) {
    my $o = $json->decode($_);
    exclude($o) if scalar keys %exclude;
    clean($o) if $clean;
    $o = expand($o) if $expand;

    my $result = $json->encode($o);

    # convert 3- to 4-space indent
    $result =~ s{^(   )+}{'    ' x int(length($&) / 3)}gem;

    # remove spaces before colons ("foo" : "bar" => "foo": "bar")
    $result =~ s{^ *\".*?\"\K\s+:}{:}gm;

    # normalize terminating newline
    $result =~ s{\r}{};
    $result .= "\n";

    print $result;
}

sub exclude {
    my $o = shift;
    if (ref $o eq 'HASH') {
        delete $o->{$_} foreach keys %exclude;
        foreach my $k (keys %$o) {
            if ($exclude{$k . '=' . $o->{$k}}) {
                delete $o->{$k};
            }
        }
        foreach my $k (keys %timestamp) {
            if (defined $o->{$k}) {
                $o->{$k} .= ' (' . strftime('%a %Y-%m-%d %H:%M:%S %z %Z', localtime($o->{$k})) . ')';
            }
        }
        exclude($_) foreach values %$o;
    } elsif (ref $o eq 'ARRAY') {
        exclude($_) foreach @$o;
    }
    return $o;
}

sub clean {
    my $o = shift;
    if (ref $o eq 'HASH') {
        clean($_) foreach values %$o;
        foreach my $k (keys %$o) {
            delete $o->{$k} if ref $o->{$k} eq 'ARRAY' && !scalar @{$o->{$k}};
            delete $o->{$k} if ref $o->{$k} eq 'HASH'  && !scalar keys %{$o->{$k}};
        }
    } elsif (ref $o eq 'ARRAY') {
        clean($_) foreach @$o;
        @$o = grep { !(ref $_ eq 'HASH' && !scalar keys %$_) } @$o;
        @$o = grep { !(ref $_ eq 'ARRAY' && !scalar @$_) } @$o;
    }
    return $o;
}

sub expand {
    my ($o, $level) = @_;
    $level //= 0;
    return undef if !defined $o;
    if (ref $o eq '') {
        if (looksLikeJSON($o)) {
            my $result;
            eval {
                my $oo = $json->decode($o);
                $result = expand($oo, $level + 1);
            };
            if ($@) {
                return $o;
            }
            return $result;
        }
        return $o;
    } elsif (ref $o eq 'ARRAY') {
        my $result = [];
        foreach my $member (@$o) {
            push(@$result, expand($member, $level + 1));
        }
        return $result;
    } elsif (ref $o eq 'HASH') {
        my $result = {};
        foreach my $key (keys %$o) {
            my $value = $o->{$key};
            $result->{$key} = expand($value, $level + 1);
        }
        return $result;
    } else {
        return $o;
    }
}

sub looksLikeJSON {
    my $str = shift;
    return 0 if !defined $str;
    if ($str =~ m{\A\{\".*?\":.*\}\z}) {
        return 1;
    }
    if ($str =~ m{\A\[.*\]\z}) {
        return 1;
    }
    return 0;
}
