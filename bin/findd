#!/usr/bin/env bash

dirname="$(dirname "$0")"

# shellcheck disable=SC1090
. "${dirname}/../share/utilities/findd-grepp.bash"

declare -a global_options
declare -a starting_points

verbose=0
dry_run=0
list_excludes_only=0

while (( $# )) ; do
    case "$1" in
        "--test")
            shift

            temp="$(mktemp)"
            temp2="$(mktemp)"
            temp3="$(mktemp)"

            # shellcheck disable=SC2154
            "${find}"  "$@" | sort >"${temp}" # all files
            findd "$@" | sort >"${temp2}" # included files
            findd --list-excludes-only "$@" -exec "${find}" {} + | sort >"${temp3}" # excluded files

            comm -2 -3 "${temp}" "${temp2}" | diff "${temp3}" -

            wc -l "${temp}"
            wc -l "${temp2}"
            wc -l "${temp3}"

            rm "${temp}"  || true
            rm "${temp2}" || true
            rm "${temp3}" || true

            exit

            ;;
        "--xtrace")
            set -x
            ;;
        "--no-xtrace")
            set +x
            ;;
        "--verbose")
            verbose=$((verbose + 1))
            shift
            ;;
        "--dry-run")
            dry_run=1
            shift
            ;;
        "--exclude-binaries"|"--exclude-binary"|"--exclude-binary-files")
            grepp_exclude_binary_files=1
            shift
            ;;
        "--include-binaries"|"--include-binary"|"--include-binary-files")
            grepp_exclude_binary_files=0
            shift
            ;;
        "--list-excludes-only")
            list_excludes_only=1
            shift
            ;;
        "--exclude")
            shift
            add_user_exclude "$1"
            shift
            ;;
        "--exclude="*)
            add_user_exclude "${1#*=}"
            shift
            ;;
        "--no-exclude")
            shift
            remove_from_excludes "$1"
            shift
            ;;
        "--no-exclude="*)
            remove_from_excludes "${1#*=}"
            shift
            ;;
        "--"*)
            >&2 echo "findd: invalid option: $1"
            exit 1
            ;;

        # options that can be specified as `-D <whatever>` or
        # `-D<whatever>`
        "-D")
            optname="$1"
            global_options+=("$1")
            shift
            if (( $# )) ; then
                global_options+=("$1")
                shift
            else
                >&2 echo "findd: ${optname} requires an argument"
                exit 1
            fi
            ;;

        # options that *must* be specified as `-O<whatever>`,
        # not `-O <whatever>`
        "-O")
            optname="$1"
            if (( $# >= 2 )) ; then
                global_options+=("$1$2")
                shift 2
            else
                >&2 echo "findd: ${optname} requires an argument"
                exit 1
            fi
            ;;

        # options that can be specified as `-D<whatever>`
        "-D"*|"-O"*)
            global_options+=("$1")
            shift
            ;;

        # options taking no arguments
        "-H"|"-L"|"-P")
            global_options+=("$1")
            shift
            ;;

        # anything that starts an expression (or action)
        "!"|"("|"-"*)
            break
            ;;

        # anything else is likely to be a pathname [or
        # "starting-point" in the parlance of find(1)]
        *)
            starting_points+=("$1")
            shift
            ;;
    esac
done

if (( ! ${#starting_points[@]} )) ; then
    starting_points=(".")
fi

set_find_excludes

declare -a find_command
find_command=(
    "${find}"
    "${global_options[@]}"
    "${starting_points[@]}"
    \! \( -type d \( "${find_directory_excludes[@]}" \) -prune \)
    \! \( "${find_file_excludes[@]}" \)
    "$@"
)

if (( list_excludes_only )) ; then
    find_command=(
        "${find}"
        "${global_options[@]}"
        "${starting_points[@]}"
        \(
        \( -type d \( "${find_directory_excludes[@]}" \) -prune \)
        -o
        \( "${find_file_excludes[@]}" \)
        \)
    )
fi

if (( dry_run || verbose )) ; then
    >&2 echo_command "${find_command[@]}"
fi
if (( dry_run )) ; then
    exit 0
fi
exec "${find_command[@]}"
