#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
## no critic 'ProhibitLeadingZeros'

use Text::Tabs qw(expand);

if (scalar @ARGV) {
    list($_) foreach @ARGV;
} else {
    while (<>) {
        s{\R\z}{};                   # safer chomp
        if (s{^([^\t ]*)[ ]*\t}{}) { # du output
            print($&);
        }
        list($_);
    }
}

#------------------------------------------------------------------------------

my $sixMonths;
my @months;
BEGIN {
    $sixMonths = 60 * 60 * 24 * (365 / 2);
    @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
}
sub list {
    my $error;
    my ($filename) = @_;
    my @stat = lstat($filename);
    if (!scalar @stat) {
        warn("$filename: $!\n");
        return;
    }
    my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blocksize, $blocks) = @stat;
    my $isSymlink = (($mode & 0170000) >> 12) == 10;
    my $readlink;
    if ($isSymlink) {
        eval { $readlink = readlink($filename) };
        $readlink //= "<readlink failed>";
    }
    my $format_mode = format_mode($mode);
    my $user  = defined $uid ? (eval { (getpwuid($uid))[0] } // $uid) : '';
    my $group = defined $gid ? (eval { (getgrgid($gid))[0] } // $gid) : '';
    printf('%10d %4d %-10s %3d %-8s %-8s ', $ino, $blocks, $format_mode, $nlink, $user, $group); # output fields [0] through [5]
    if ($mode & 0140000) {
        printf('%9d ', $size);  # [6]
    } else {
        printf('%4x,%4x ', ($dev & 0xffff0000 >> 16), ($dev & 0xffff)); # [6]
    }
    my @localtime = localtime($mtime);
    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = @localtime;
    if (time() - $mtime < $sixMonths) {
        printf('%s %2d %02d:%02d ', $months[$mon], $mday, $hour, $min); # [7,8,9]
    } else {
        printf('%s %2d %5d ', $months[$mon], $mday, $year + 1900); # [7,8,9]
    }
    print($filename);           # [10]
    if ($isSymlink) {
        print(" -> $readlink\n");
    } else {
        print("\n");
    }
}

my @perms;
my @ftype;
BEGIN {
    @perms = qw(--- --x -w- -wx r-- r-x rw- rwx);
    @ftype = qw(. p c ? d ? b ? - ? l ? s ? ? ?);
}
# stolen from Perl Power Tools
sub format_mode {
    my $mode = shift;
    my $setids = ($mode & 07000) >> 9;
    my @permstrs = @perms[($mode & 0700) >> 6, ($mode & 0070) >> 3, $mode & 0007];
    my $ftype = $ftype[($mode & 0170000) >> 12];
    if ($setids) {
        if ($setids & 01) {     # Sticky bit
            $permstrs[2] =~ s/([-x])$/$1 eq 'x' ? 't' : 'T'/e;
        }
        if ($setids & 04) {     # Setuid bit
            $permstrs[0] =~ s/([-x])$/$1 eq 'x' ? 's' : 'S'/e;
        }
        if ($setids & 02) {     # Setgid bit
            $permstrs[1] =~ s/([-x])$/$1 eq 'x' ? 's' : 'S'/e;
        }
    }
    return join '', $ftype, @permstrs;
}
