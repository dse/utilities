#!/usr/bin/env perl
use warnings;
use strict;

sub usage { print <<"END"; };
usage:
    envelope [<option> ...] [<filename> ...]
each file specified contains:
    zero or more blank lines
    the return address: a set of contiguous non-blank lines
    one or more blank lines
    the recipient address: a set of contiguous non-blank lines
        (up to and not including the next blank line, or EOF)
options:
    -o, --output=<filename>      output PostScript file; use '-' for stdout
END

our $output;

use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'o|p|output=s' => \$output,
    'h|help' => sub { usage(); exit(0); },
) or die("Type '$0 --help' for help.\n");

our $envelope = My::Envelope->new();

$envelope->output($output) if defined $output;

while (<>) {
    $envelope->parse($_);
    if (eof) {
        $envelope->print();
        $envelope->reset();
    }
}

package My::Envelope {
    use List::Util qw(max);
    use Moo;
    INIT {
        has mediaName   => (is => 'rw', default => 'Env10');
        has mediaHeight => (is => 'rw', default => 297);
        has mediaWidth  => (is => 'rw', default => 684);
        has mediaLeft   => (is => 'rw', default => 36);
        has mediaRight  => (is => 'rw', default => 648);
        has mediaTop    => (is => 'rw', default => 18);
        has mediaBottom => (is => 'rw', default => 279);

        has 'state'  => (is => 'rw', default => 0);
        has 'from'   => (is => 'rw', default => sub { return []; });
        has 'to'     => (is => 'rw', default => sub { return []; });
        has 'count'  => (is => 'rw', default => 0);
        has 'output' => (is => 'rw');
        has 'cmd' => (
            is => 'rw',
            lazy => 1,
            default => sub {
                my ($self) = @_;
                my @cmd = ("enscript", "--no-header");
                push(@cmd, "--font=Courier-Bold\@12");
                push(@cmd, "--landscape");
                push(@cmd, "--baselineskip=0");
                push(@cmd, "--media=" . $self->mediaName);
                if (defined $self->output) {
                    push(@cmd, "--output=" . $self->output);
                }
                return [@cmd];
            }
        );
        has 'fh' => (
            is => 'rw', lazy => 1, default => sub {
                my ($self) = @_;
                $self->addMedia($self->mediaName,
                                $self->mediaHeight,
                                $self->mediaWidth,
                                $self->mediaTop,
                                $self->mediaLeft,
                                $self->mediaBottom,
                                $self->mediaRight);
                my $fh;
                my $cmd = $self->cmd;
                if (!open($fh, '|-', @$cmd)) {
                    die("cannot pipe to $cmd->[0]: $!\n");
                }
                return $fh;
            }
        );
    };
    sub reset {
        my ($self) = @_;
        @{$self->from} = ();
        @{$self->to} = ();
        $self->state(0);
    };
    sub parse {
        my ($self, $line) = @_;
        $line =~ s{\R\z}{};     # safer chomp
        $line =~ s{^\s+}{};     # trim pt. 1
        $line =~ s{\s+$}{};     # trim pt. 2
        if ($line =~ m{\S}) {   # non-blank line
            if ($self->state == 0) {
                push(@{$self->from}, $line);
            } elsif ($self->state == 1) {
                push(@{$self->to}, $line);
            }
        } else {                # blank line
            if ($self->state == 0 && scalar(@{$self->from})) {
                $self->state(1);
            } elsif ($self->state == 1 && scalar(@{$self->to})) {
                $self->state(2);
            }
        }
    };
    sub print {
        my ($self) = @_;
        my $fh = $self->fh;
        $self->count($self->count + 1);
        if ($self->count != 1) {
            print $fh ("\f");
        }

        my $linesDown = 9;
        my $columnsRight = 32;

        if (scalar @{$self->from}) {
            foreach my $line (@{$self->from}) {
                print $fh ("$line\n");
            }
            if (scalar @{$self->to}) {
                my $blankLines = max(2, ($linesDown - scalar @{$self->from}));
                print $fh ("\n" x $blankLines);
                foreach my $line (@{$self->to}) {
                    print $fh ((" " x $columnsRight), "$line\n");
                }
            }
        }
    };
    sub hasMedia {
        my ($self, $media) = @_;
        $media //= $self->mediaName;
        my $fh;
        if (!open($fh, '-|', 'enscript', '--list-media')) {
            return;
        }
        while (<$fh>) {
            s{\R\z}{};          # safer chomp
            next if /^known media:/;
            next if /^name\s+width/;
            next if /^----/;
            my ($name) = split();
            if ($name eq $media) {
                return 1;
            }
        }
        close($fh);
        return;
    };
    sub addMedia {
        my ($self, $media, $width, $height, $llx, $lly, $urx, $ury) = @_;
        if ($self->hasMedia($media)) {
            return;
        }
        my $fh;
        my $filename = $ENV{HOME} . '/.enscriptrc';
        if (!open($fh, '>>', $filename)) {
            die("Cannot write $filename: $!\n");
        }
        print $fh "Media: $media $width $height $llx $lly $urx $ury\n";
        close($fh);
    };
};
