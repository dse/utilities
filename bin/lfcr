#!/usr/bin/env perl
use warnings;
use strict;

# lfcr - output every line on the same line on a terminal

use File::Basename qw(basename);
use Getopt::Long qw();
use Time::HiRes qw();
use Text::Tabs qw(expand);

our $PROGNAME = basename($0);
our $number = 0;
our $every = 0;
our $secs = 0;
our $chop = 0;

Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'h|help' => sub { usage(); exit(0); },
    'n|number' => \$number,
    'every=i' => \$every,
    'secs|seconds=f' => \$secs,
    'chop' => \$chop,
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print <<"END"; }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -h, --help           Print this message
    -n, --number         Precede every line by a line number
        --every=<int>    Print every <int>'th line
        --secs=<float>   Print a line every <float> seconds
END

$| = 1;
our $clrEol = clrEol();
our $columns = columns() - 1;

my $start;
my $now;
while (<>) {
    s{\R\z}{};                  # safer form of chomp
    my $line = $_;

    # when not outputting every line...
    if ($every) {
        next unless $. % $every == 0;
    }
    if ($secs) {
        $now = Time::HiRes::time();
        $start //= $now;
        next unless ($now - $start) >= $secs;
        $start = $now;
    }

    if ($number) {
        $line = sprintf('%6d', $.) . "\t" . $line;
    }

    if ($chop) {
        $line = expand($line);
        if (length($line) > $columns) {
            # $line = '...' . substr($line, length($line) - $columns - 3);
            $line = substr($line, 0, $columns - 3) . '...';
        }
    }

    if (-t 1) {
        $line =~ s{\t}{$clrEol\t};
        $line = "\r" . $line . $clrEol;
    }

    print $line;
}
print "\n";

sub clrEol {
    if (exists $ENV{TERM} && $ENV{TERM} =~ m{^(screen|xterm|vt\d|linux|putty)}) {
        return "\e[K";
    }
    return `tput el`;
}

our $hasIoctl;
our $hasTermSize;
BEGIN {
    eval {
        require 'sys/ioctl.ph';
        $hasIoctl = 1;
    };
    eval {
        require Term::Size;
        $hasTermSize = 1;
    };
}

sub columns {
    if (exists $ENV{COLS}) {
        return $ENV{COLS};
    }
    if (exists $ENV{COLUMNS}) {
        return $ENV{COLUMNS};
    }
    if ($hasTermSize) {
        my $columns = columnsFromTermSize();
        return $columns if $columns;
    }
    if ($hasIoctl) {
        my $columns = columnsFromIoctl();
        return $columns if $columns;
    }
    my $columns = columnsFromTput();
    return $columns if $columns;
}

sub columnsFromTermSize {
    my $tty;
    return unless open($tty, '+</dev/tty');
    my $chars = Term::Size::chars($tty);
    return $chars if $chars;
    return;
}

sub columnsFromIoctl {
    return unless defined &TIOCGWINSZ;
    my $tty;
    return unless open($tty, '+</dev/tty');
    my $winsize;
    return unless ioctl($tty, &TIOCGWINSZ, $winsize = '');
    my ($row, $col, $xpixel, $ypixel) = unpack('S4', $winsize);
    return $col if $col;
    return;
}

sub columnsFromTput {
    my $cols = `tput cols`;
    $cols =~ s{\R\z}{};
    return $cols if $cols;
    return;
}
