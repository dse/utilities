#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our $EXTENSIONS = {
    # File::MimeInfo returns a list of extensions given a mime type
    # but the first one isn't always a good "canonical" one.
    'text/html'                => { ext => 'html' },
    'text/css'                 => { ext => 'css'  },
    'application/javascript'   => { ext => 'js'   },
    'text/javascript'          => { ext => 'js'   },
    'application/x-javascript' => { ext => 'js'   },
    'text/plain'               => { ext => 'txt'  },
    'image/png'                => { ext => 'png'  },
    'application/json'         => { ext => 'json' },
    'image/jpeg'               => { ext => 'jpg'  },
    'image/gif'                => { ext => 'gif'  },
};

our @exclude;
our $verbose;
our @urlPattern;
our $jsonPP;

use JSON::XS qw();
use Path::Tiny qw(path);
use File::Path qw(make_path remove_tree);
use Sort::Naturally qw(nsort);
use File::MimeInfo qw(extensions mimetype);
use MIME::Base64 qw(decode_base64);
use Getopt::Long;
use File::Glob qw(:bsd_glob);
use Regexp::Wildcards;

# we have to make a function call like this at somewhere around this
# point in order for future extensions() calls to work.
extensions('text/html');

my $rw = Regexp::Wildcards->new(type => 'unix');

Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'u|url-pattern=s' => \@urlPattern,
    'j|json-pp' => \$jsonPP,
    'v|verbose+' => \$verbose,
    'x|exclude=s' => sub {
        my $ext = lc $_[1];

        # make '*.jpg', '.jpg', and 'jpg' equivalent.
        $ext =~ s{^\*?\.}{};

        push(@exclude, $rw->convert($ext));
    },
    'h|help' => sub { usage(); exit(0); },
);

sub usage { print(<<"END"); }
usage: $PROGNAME [<option> ...] [<harfile> ...]
options:
    -u, --url-pattern=<pattern>
    -x, --exclude=<ext|mimetype>     Exclude file extensions or MIME types.
                                     Accepts wildcards.
    -h, --help                       Show this message.
END

@urlPattern = map { qr{$_} } @urlPattern;

my $json = JSON::XS->new()->ascii(1)->pretty(1)->canonical(1);
my $harCounter = 0;
local $/ = undef;               # slurp entire files at once
while (<>) {
    my $filenameCounter = 0;    # for generating filenames
    my $o = $json->decode($_);
    my $base;
    if ($ARGV eq '-') {
        $base = sprintf('%04d.har', ++$harCounter);
    } else {
        $base = $ARGV;          # usually something like 'www.xxx.com.har'
    }
    $base =~ s{\.har$}{};

    my $dir           = $base . '.harx';
    my $indexFilename = $base . '.harx.txt';

    if (-d $dir) {
        # leave files not matching harx-####.xxx alone.
        my @cleanup = bsd_glob("$dir/harx-*");
        if (scalar @cleanup) {
            warn(sprintf("cleaning up %d files in %s\n", scalar @cleanup, $dir)) if $verbose;
            unlink(@cleanup);
        }
    } else {
        make_path($dir);
    }
    my $log = $o->{log};
    my $entries = $log->{entries};
    my $fh;
    open($fh, '>', $indexFilename) or die("cannot write $indexFilename: $!\n");
    my $col1len = length(sprintf('%s/harx-%04d%s', $dir, 0, '.xxxxxxxx'));
  entry:
    foreach my $entry (@$entries) {
        my $request  = $entry->{request};
        my $url      = $request->{url};

        if (scalar @urlPattern) {
            my $matches = 0;
            foreach my $urlPattern (@urlPattern) {
                if ($url =~ $urlPattern) {
                    $matches = 1;
                    last;
                }
            }
            if (!$matches) {
                next entry;
            }
        }

        my $response = $entry->{response};
        my $status   = $response->{status};
        next if $status == 307; # internal redirect
        next if $status > 399;  # failed request
        next if $status < 100;  # invalid response code
        my $content  = $response->{content};

        my $type = $content->{mimeType};
        $type = undef if $type eq '';
        $type = undef if $type eq 'application/octet-stream';

        my @ext;
        if (defined $type) {
            @ext = extensions($type);
            @ext = grep { defined $_ && $_ ne '' } @ext;
        }

        if (!scalar @ext) {
            if ($url =~ m{\.([0-9A-Za-z]+)(?:\?.*)?$}) {
                my $ext = $1;
                if (!defined $type) {
                    $type = mimetype("/thisdirectorydoesnotexist/thisfiledoesnotexist.$ext");
                }
                push(@ext, $ext);
            }
        }

        foreach my $rx (@exclude) {
            next entry if $type =~ $rx;
            foreach my $ext (@ext) {
                next entry if $ext =~ $rx;
            }
        }

        my $ext = eval { $EXTENSIONS->{$type}->{ext} } // $ext[0] // '';
        $ext = ".$ext" if $ext ne '';

        my $encoding = $content->{encoding};
        my $text = $content->{text};
        if (!defined $text || $text eq '') {
            next entry;
        }

        my $binary = 0;
        if (defined $encoding) {
            if ($encoding eq 'base64') {
                $binary = 1;
                $text = decode_base64($text);
            } else {
                warn "WARNING: unrecognized encoding '$encoding': $url\n";
            }
        }

        if ($jsonPP) {
            if ($type eq 'application/json' || $url =~ m{\.json$}i) {
                my $o = $json->decode($text);
                $text = $json->encode($o);
            }
        }

        my $filename = sprintf('%s/harx-%04d%s', $dir, ++$filenameCounter, $ext);
        say $fh sprintf('%-*s %-32s %s', $col1len, $filename, $type, $url);

        if ($binary) {
            path($filename)->spew({ binmode => ':raw' }, decode_base64($text));
        } else {
            path($filename)->spew($text);
        }
    }
    close($fh);
    printf("wrote %d files into %s directory; index generated: %s\n", $filenameCounter, $dir, $indexFilename);
}
