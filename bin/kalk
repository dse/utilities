#!/usr/bin/env perl
use warnings;
use strict;
use Scalar::Util qw(looks_like_number);
while (<>) {
    s{(?<start>\{\{)
      (?<sp1>\s*)
      (?<expr>\S.*?)
      (?<sp2>\s*)
      (?:
          (?<eq>=)
          (?<sp3>\s*)
          (?:
              (?<repl>\S.*?)
              (?<sp4>\s*)
          )?
      )?
      (?<end>\}\})}
     { replace($&, %+) }gex;
    print;
}
sub replace {
    my ($M, %A) = @_;
    my $eval = evaluate($A{expr});
    if ($@) {
        warn($@);
        return $M;
    }
    if (defined $A{eq}) {
        if (defined $A{repl}) {
            return $A{start} . $A{sp1} . $A{expr} . $A{sp2} . $A{eq} . $A{sp3} . $eval . $A{sp4} . $A{end};
        }
        return $A{start} . $A{sp1} . $A{expr} . $A{sp2} . $A{eq} . $A{sp3} . $eval . $A{sp3} . $A{end};
    }
    return $A{start} . $A{sp1} . $eval . $A{sp2} . $A{end};
}
sub evaluate {
    my $expr = shift;
    return $expr if looks_like_number($expr);
    return eval($expr);
}
