#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);

use Getopt::Long;
use POSIX qw(floor);

our $two;

Getopt::Long::Configure('gnu_compat', 'bundling', 'no_ignore_case');
Getopt::Long::GetOptions(
    "2" => \$two,
) or die();

if (!scalar @ARGV) {
    exit(0);
}
foreach my $arg (@ARGV) {
    if ($two) {
        approximate($arg, 2);
    } else {
        approximate($arg);
    }
}

sub approximate {
    my ($x, $scheme) = @_;
    $x = eval $x;
    print("$x - successive closer fractional approximations\n");
    my $mindiff;
    my $denom;
    my $compute = sub {
        my $numer = floor($x * $denom);
        my $approx = $numer / $denom;
        my $diff = abs($approx - $x);
        if (!defined $mindiff) {
            $mindiff = $diff;
            printf("    %8d / %-8d = %10.4g (%.4e)\n", $numer, $denom, $approx, $diff);
        } elsif ($diff < $mindiff) {
            $mindiff = $diff;
            printf("    %8d / %-8d = %10.4g (%.4e)\n", $numer, $denom, $approx, $diff);
        }
    };
    if ($scheme == 2) {
        for ($denom = 2; $denom <= 65536; $denom *= 2) {
            &$compute();
        }
    } else {
        for ($denom = 2; $denom <= 4096; $denom += 1) {
            &$compute();
        }
    }
}

# === previous code where $x is the original value
# my $golden = (1 + sqrt(5)) / 2;
# my $diff;
# if (($diff = abs($x - sqrt(2))) < 0.01) {
#     printf("%g = sqrt(2) [%g]\n", $x, $diff);
# }
# if (($diff = abs($x - sqrt(0.5))) < 0.01) {
#     printf("%g = sqrt(0.5) [%g]\n", $x, $diff);
# }
# if (($diff = abs($x - $golden)) < 0.01) {
#     printf("%g = golden [%g]\n", $x, $diff);
# }
# if (($diff = abs($x - 1/$golden)) < 0.01) {
#     printf("%g = 1/golden [%g]\n", $x, $diff);
# }
