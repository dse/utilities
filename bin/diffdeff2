#!/usr/bin/env perl
use warnings;
use strict;

use File::Temp qw(tempfile);
use List::Util qw(all);

my @filenames = @ARGV;
my @files = map { { filename => $_ } } @filenames;
for (my $i = 0; $i < scalar @files; $i += 1) {
    $files[$i]->{columnIndex} = $i;
}

my $letters = 'abcdefghijklmnopqrstuvwxyzABCDEF';

my @tempfilenames = map { $_->{tempfilename} } @files;

my $isJs = all { $_->{filename} =~ m{\.js$} } @files;

write_temp_files();
print_header();
run_difdef();

sub run_difdef {
    my $ph;
    open($ph, '-|', 'difdef', map { $_->{tempfilename} } @files) or die("popen: $!\n");
    my @linecounters = map { 0 } @files;
    local $_;
    while (<$ph>) {
        s{\R\z}{};
        my $column = substr($_, 0, (scalar @filenames));
        my $line   = substr($_, (scalar @filenames));

        for (my $i = 0; $i < scalar @filenames; $i += 1) {
            if (substr($column, $i, 1) ne ' ') {
                $linecounters[$i] += 1;
            }
        }

        next if $line =~ m{^\s*$}; # ignore blank lines
        next if $line =~ m{^\s*//}; # ignore comments in JS
        next if $line =~ m{^\s*/\*.*\*/\s*$}; # ignore /* comments */

        my @occurrences;
        my @whichFiles;
        for (my $i = 0; $i < scalar @filenames; $i += 1) {
            if (substr($column, $i, 1) ne ' ') {
                push(@occurrences, $files[$i]->{lines}->[$linecounters[$i] - 1]);
                push(@whichFiles, $files[$i]);
            }
        }

        my %occurrences;
        foreach my $line (@occurrences) {
            $occurrences{$line} += 1;
        }
        my @occurrenceCounts = map { [$_, $occurrences{$_}] } @occurrences;
        @occurrenceCounts = sort { $b->[1] <=> $a->[1] } @occurrenceCounts;

        printf("%s|%s\n", $column, $occurrenceCounts[0][0]);
    }
}

sub write_temp_files {
    foreach my $file (@files) {
        my ($tempfh, $tempfilename) = tempfile();
        my $fh;
        open($fh, '<', $file->{filename}) or die("$file->{filename}: $!\n");
        $file->{lines} = [];
        local $_;
        while (<$fh>) {
            s{\R\z}{};
            push(@{$file->{lines}}, $_);
            s{"}{'}g;           # ignore differences in quotation marks
            s{\s+}{}g;          # ignore whitespace
            $_ = lc $_;         # ignore differences in case

            # s{^\s+}{}g;
            # s{\s+$}{}g;
            # s{\s+}{ }g;

            print $tempfh "$_\n";
        }
        close($fh);
        $file->{tempfilename} = $tempfilename;
    }
}

sub file_get_contents {
    my $filename = shift;
    my $fh;
    open($fh, '<', $filename) or die("$filename: $!\n");
    local $/ = undef;
    my $contents = <$fh>;
    return $contents;
}

sub print_header {
    for (my $i = 0; $i < scalar @filenames; $i += 1) {
        my $column = ' ' x scalar @filenames;
        substr($column, $i, 1) = substr($letters, $i, 1);
        printf("%s|%s\n", $column, $filenames[$i]);
    }
    printf("%s|%s\n", ('-' x scalar @filenames), ('-' x 79));
}
