#!/usr/bin/env perl
#
# guessindent - CLI indentation guessing tool.
#
# Try to guess tab width and spacing settings.
#
use warnings;
use strict;
use v5.10.0;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our $verbosity = 0;
our $dryRun = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'v|verbose+' => \$verbosity,
    'n|dry-run'  => \$dryRun,
    'h|help'     => sub { usage(); exit(0); },
    # ...
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] <argument> ...
options:
    -h, --help
    -n, --dry-run
    -v, --verbose
    ...
END

###############################################################################

my $guess = My::Guess::Indent->new();
$guess->verbosity($verbosity);

my $oldARGV;
while (<>) {
    if (!defined $oldARGV || $oldARGV ne $ARGV) {
        $guess->setFilename($ARGV);
    }
    $guess->addLine($_);
} continue {
    if (eof(ARGV)) {
        $guess->eof();
    }
    $oldARGV = $ARGV;
}

$guess->analyze();

###############################################################################

package My::Guess::Indent {
    use Moo;
    INIT {
        has files       => (is => 'rw', default => sub { return []; });
        has currentFile => (is => 'rw');
        has filename    => (is => 'rw');
        has verbosity   => (is => 'rw', default => 0);
    }
    sub addLine {
        my ($self, $text) = @_;
        $text =~ s{\R\z}{};     # safer chomp
        if (!defined $self->currentFile) {
            $self->currentFile(My::Guess::Indent::File->new(
                filename => $self->filename,
                verbosity => $self->verbosity
            ));
            push(@{$self->files}, $self->currentFile);
        }
        $self->currentFile->addLine($text);
    }
    sub setFilename {
        my ($self, $filename) = @_;
        if (!defined $self->filename || $self->filename ne $filename) {
            $self->eof();
            $self->filename($filename);
        }
    }
    sub eof {
        my ($self) = @_;
        if (defined $self->currentFile) {
            $self->currentFile(undef);
        }
    }
    sub analyze {
        my ($self) = @_;
        foreach my $file (@{$self->files}) {
            $file->analyze();
        }
    }
};

package My::Guess::Indent::File {
    use Moo;
    INIT {
        has filename  => (is => 'rw');
        has lines     => (is => 'rw', default => sub { return []; });
        has verbosity => (is => 'rw', default => 0);
    }
    sub addLine {
        my ($self, $text) = @_;
        my $line = My::Guess::Indent::Line->new(
            text => $text,
            filename => $self->filename,
            verbosity => $self->verbosity,
        );
        push(@{$self->lines}, $line);
        $line->parse();
    }
    sub output {
        my ($self, $format, @args) = @_;
        printf("%-64s ", $self->filename . ':');
        printf($format, @args);
        print("\n");
    }
    sub analyze {
        my ($self) = @_;
        $self->flagComments();

        my $weightedLineCount = $self->getWeightedLineCount();
        if ($weightedLineCount == 0) {
            return;
        }

        foreach my $line (grep { $_->weight } @{$self->lines}) {
            $line->analyze();
        }

        my $percentHavingNoSpace = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return $line->spaceCount == 0; });
        my $percentHavingNoTabs  = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return $line->tabCount == 0; });
        my $percentHavingTabs = 100 - $percentHavingNoTabs;

        my $spaces;
        my $tabWidth;
        my $message;

        if ($percentHavingNoSpace >= 95) {
            if ($percentHavingTabs >= 5) {
                $message = 'tab-only indentation';
            } else {
                $message = 'no indentation';
            }
        } elsif ($percentHavingNoTabs >= 95) { # spaces only
            $tabWidth = 0;
            my $percentModulo8 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount % 8 == 0); });
            my $percentModulo4 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount % 4 == 0); });
            my $percentModulo2 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount % 2 == 0); });
            if ($percentModulo8 >= 95) {
                $spaces = 8;
            } elsif ($percentModulo4 >= 95) {
                $spaces = 4;
            } elsif ($percentModulo2 >= 95) {
                $spaces = 2;
            } elsif ($percentModulo8 >= 75) {
                $spaces = 8;
            } elsif ($percentModulo4 >= 75) {
                $spaces = 4;
            } elsif ($percentModulo2 >= 75) {
                $spaces = 2;
            } else {
                # dunno
            }
        } else {                # tabs and spaces
            my $percentLessThan2 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount < 2); });
            my $percentLessThan4 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount < 4); });
            my $percentLessThan8 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->spaceCount < 8); });

            if ($percentLessThan2 >= 95) {
                $tabWidth = 2;
            } elsif ($percentLessThan4 >= 95) {
                $tabWidth = 4;
            } elsif ($percentLessThan8 >= 95) {
                $tabWidth = 8;
            } elsif ($percentLessThan2 >= 75) {
                $tabWidth = 2;
            } elsif ($percentLessThan4 >= 75) {
                $tabWidth = 4;
            } elsif ($percentLessThan8 >= 75) {
                $tabWidth = 8;
            } else {
                # dunno
            }

            if (defined $tabWidth) {
                my $percentModulo8 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->getTabbedSpaceCount(8) == 0); });
                my $percentModulo4 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->getTabbedSpaceCount(4) == 0); });
                my $percentModulo2 = $self->percentageOfLinesHaving(sub => sub { my $line = shift; return ($line->getTabbedSpaceCount(2) == 0); });
                if ($percentModulo8 >= 95) {
                    $spaces = 8;
                } elsif ($percentModulo4 >= 95) {
                    $spaces = 4;
                } elsif ($percentModulo2 >= 95) {
                    $spaces = 2;
                } elsif ($percentModulo8 >= 75) {
                    $spaces = 8;
                } elsif ($percentModulo4 >= 75) {
                    $spaces = 4;
                } elsif ($percentModulo2 >= 75) {
                    $spaces = 2;
                } else {
                    # dunno
                }
            }
        }

        my $output = '';
        if (defined $spaces) {
            $output .= sprintf('%1d spaces', $spaces);
        } else {
            $output .= '        ';
        }

        $output .= '  ';

        if (defined $tabWidth) {
            if ($tabWidth == 0) {
                $output .= '  no tabs   ';
            } else {
                $output .= sprintf('%d space tabs', $tabWidth);
            }
        } else {
            $output .= '            ';
        }

        if (defined $message) {
            $output .= '  ' . $message;
        }

        printf("%-80s %s\n", $self->filename . ':', $output);
    }
    sub flagComments {
        my ($self) = @_;
        my $isInBlockComment = 0;
        foreach my $line (@{$self->lines}) {
            if ($isInBlockComment) {
                $line->weight(0);
            }
            $line->flagComments(isInBlockComment => $isInBlockComment);
            $isInBlockComment = $line->endsInsideBlockComment;
        }
    }
    sub getWeightedLineCount {
        my ($self) = @_;
        my $result = 0;
      line:
        foreach my $line (@{$self->lines}) {
            $result += $line->weight;
        }
        return $result;
    }
    sub percentageOfLinesHaving {
        my ($self, %args) = @_;
        my $sub = $args{sub};
        my $given = $args{given};

        my $linesTotal = 0;     # weighted
        my $linesMatching = 0;  # weighted

      line:
        foreach my $line (@{$self->lines}) {
            my $weight = $line->weight;
            if (!$weight) {
                next line;
            }
            if ($given) {
                my $result = $given->($line);
                if (!$result) {
                    next line;
                }
            }
            $linesTotal += $weight;
            if ($sub->($line)) {
                $linesMatching += $weight;
            }
            if ($self->verbosity >= 2) {
                printf("    %g/%g %ds %dt> %s\n", $linesMatching, $linesTotal, $line->spaceCount, $line->tabCount, $line->text);
            }
        }

        if ($linesTotal == 0) {
            return;
        }

        return $linesMatching / $linesTotal * 100;
    }
};

package My::Guess::Indent::Line {
    use Moo;
    INIT {
        has text                   => (is => 'rw');
        has originalText           => (is => 'rw');
        has weight                 => (is => 'rw', default => 1);
        has endsInsideBlockComment => (is => 'rw');
        has filename               => (is => 'rw');
        has spaceCount             => (is => 'rw');
        has tabCount               => (is => 'rw');
        has verbosity              => (is => 'rw', default => 0);
    }
    INIT {
        import My::Guess::Indent::Util qw(:all);
    }
    sub BUILD {
        my ($self) = @_;
        if (!defined $self->originalText) {
            $self->originalText($self->text);
        }
    }
    sub cleanup {
        my ($self) = @_;
        my $text = $self->text;
        if (defined $text) {
            $text =~ s{\R\z}{};
            $self->text($text);
        }
    }
    sub parse {
        my ($self) = @_;
        $self->cleanup();
        my $text = $self->text;

        if (!defined $text) {
            $self->weight(undef);
            return;
        }

        my $LC = startLineComment($self->filename);

        if (defined $LC) {
            # remove strings in case /* or // occurs in one
            $text =~ s{"([^"\\]|\\"|\\[xu]\{.*?\}|\\.)*"}{};
            $text =~ s{'([^'\\]|\\'|\\[xu]\{.*?\}|\\.)*'}{};

            # remove line comments in case /* occurs in one
            $text =~ s{${LC}.*$}{};
        }

        # ignore and un-weigh blank lines
        if ($text !~ m{\S}) {
            $self->weight(0);
            return;
        }

        # ignore lines with no leading whitespace for indentation guessing purposes
        if ($text !~ m{^\s+}) {
            $self->weight(0);
            return;
        }

        # don't weigh lines whose leading whitespace contains ' ' then a tab
        if ($text =~ m{^(\s+)}) {
            my $leading = $1;
            if ($leading =~ m{ \t}) {
                $self->weight(0);
                return;
            }
        }
    }
    sub flagComments {
        my ($self, %args) = @_;

        my $isInBlockComment = $args{isInBlockComment};

        if (!defined $self->filename) {
            return;
        }

        my $SC = startBlockComment($self->filename);
        my $EC = endBlockComment($self->filename);
        my $LC = startLineComment($self->filename);

        $self->endsInsideBlockComment(0);

        if (!defined $SC || !defined $EC) {
            return;
        }

        my $text = $self->text;

        if (defined $LC) {
            # remove strings in case /* or // occurs in one
            $text =~ s{"([^"\\]|\\"|\\[xu]\{.*?\}|\\.)*"}{};
            $text =~ s{'([^'\\]|\\'|\\[xu]\{.*?\}|\\.)*'}{};

            # remove line comments in case /* occurs in one
            $text =~ s{${LC}.*$}{};
        }

        if ($isInBlockComment) {
            if ($text =~ s{^.*?${EC}}{}) {
                # we're out of a comment now
            } else {
                $self->endsInsideBlockComment(1);
                return;
            }
        }

        # remove /* ... */ comments on the same line
        while ($text =~ s{^.*?${SC}.*?${EC}}{}) {
            # do nothing else
        }

        # check for /* not followed by */
        if ($text =~ m{${SC}(?!.*?${EC})}) {
            $self->endsInsideBlockComment(1);
        }

        return;
    }
    sub analyze {
        my ($self) = @_;
        if (!$self->weight) {
            $self->tabCount(undef);
            $self->spaceCount(undef);
            return;
        }
        if (!defined $self->text) {
            $self->tabCount(undef);
            $self->spaceCount(undef);
            return;
        }
        if ($self->text !~ m{^(\t*)(\s*)}) {
            $self->tabCount(undef);
            $self->spaceCount(undef);
            return;
        }
        my ($tabs, $spaces) = ($1, $2);
        $self->tabCount(length $1);
        $self->spaceCount(length $2);
    }
    sub getTabbedSpaceCount {
        my ($self, $spacesPerTab) = @_;
        return $self->tabCount * $spacesPerTab + $self->spaceCount;
    }
};

package My::Guess::Indent::Util {
    use Exporter;
    use base 'Exporter';
    use vars (
        '@EXPORT_OK',
        '%EXPORT_TAGS',
    );
    BEGIN {
        @EXPORT_OK = (
            'startBlockComment',
            'endBlockComment',
            'startLineComment',
        );
        %EXPORT_TAGS = (
            'all' => [
                'startBlockComment',
                'endBlockComment',
                'startLineComment',
            ]
        );
    }
    sub startBlockComment {
        my ($filename) = @_;
        if ($filename =~ m{\.([ch]|[ch]pp|[ch]xx|[ch]\+\+|java|php|js|css|scss|cs)$}i) {
            return qr{/\*};
        }
        return;
    }
    sub endBlockComment {
        my ($filename) = @_;
        if ($filename =~ m{\.([ch]|[ch]pp|[ch]xx|[ch]\+\+|java|php|js|css|scss|cs)$}i) {
            return qr{\*/};
        }
        return;
    }
    sub startLineComment {
        my ($filename) = @_;
        if ($filename =~ m{\.([ch]|[ch]pp|[ch]xx|[ch]\+\+|java|php|js|scss|cs)$}i) {
            # no // comments in .css files.
            return qr{//};
        }
        return;
    }
};
