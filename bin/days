#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

use Time::ParseDate qw(parsedate);
use POSIX qw(strftime);

sub round {
    my $x = shift;
    return int(0.5 + $x);
}

my $firstarg = $ARGV[0];
if (defined $firstarg &&
        ($firstarg eq "since" ||
         $firstarg eq "until" ||
         $firstarg eq "beween")) {
    shift @ARGV;
}

our $date_format = "%a %Y-%m-%d";

# needed in all cases, in case relative dates are specified
our $now = parsedate("midnight");
our $now_fmt = strftime($date_format, localtime($now));

# days <date> <integer>
# days <date> <sign> <integer>
if (scalar @ARGV == 2 && $ARGV[1] =~ m{^([\-\+]?)(\d+)$}) {
    my ($sign, $delta_days) = ($1, $2);
    $delta_days *= -1 if $sign eq '-';
    delta_days($ARGV[0], $delta_days);
    exit 0;
} elsif (scalar @ARGV == 3 && ($ARGV[1] eq "+" || $ARGV[1] eq "-") && $ARGV[2] =~ m{^([\-\+]?)(\d+)$}) {
    my ($sign, $delta_days) = ($1, $2);
    $delta_days *= -1 if $sign eq '-';
    $delta_days *= -1 if $ARGV[1] eq '-';
    delta_days($ARGV[0], $delta_days);
    exit 0;
}

if (!scalar @ARGV || scalar @ARGV > 3) {
    usage();
    exit 1;
}

my @date = @ARGV;
my @time_t;
foreach my $date (@date) {
    my $time_t = parsedate($date, NOW => $now);
    if (!defined $time_t) {
        die("bad date: $date\n");
    }
    push(@time_t, $time_t);
}

# days <date>
# days <date> <date>
if (scalar @date == 1) {
    since_or_until($time_t[0]);
} elsif (scalar @date == 2) {
    between($time_t[0], $time_t[1]);
}

sub since_or_until {
    my ($then) = @_;
    my $days_since = round(($now - $then) / 86400);
    my $abs_days_since = abs($days_since);
    my $then_fmt = strftime($date_format, localtime($then));
    if (-t 1) {
        if ($days_since >= 0) {
            printf("Today, %s, is %d days since %s\n", $now_fmt, $abs_days_since, $then_fmt);
        } else {
            printf("Today, %s, %d days until %s\n", $now_fmt, -$abs_days_since, $then_fmt);
        }
    } else {
        say $days_since;
    }
}

sub between {
    my ($before, $after) = @_;
    my $days = round(($after - $before) / 86400);
    my $before_fmt = strftime($date_format, localtime($before));
    my $after_fmt  = strftime($date_format, localtime($after));
    if (-t 1) {
        if ($days >= 0) {
            printf("There are %d days from %s to %s\n", $days, $before_fmt, $after_fmt);
        } else {
            printf("There are %d days from %s to %s\n", -$days, $after_fmt, $before_fmt);
        }
    } else {
        say $days;
    }
}

sub delta_days {
    my ($date, $delta_days) = @_;
    my $time_t = parsedate($date, NOW => $now);
    if (!defined $time_t) {
        die("bad date: $date\n");
    }
    my $abs_delta_days = abs($delta_days);
    my $sign = ($delta_days < 0) ? '-' : '+';
    my $relative = sprintf('%s %s days', $sign, $abs_delta_days);
    my $new_time_t = parsedate($relative, NOW => $time_t);
    if (!defined $new_time_t) {
        die("bad date: $relative\n");
    }
    my $date_fmt     = strftime($date_format, localtime($time_t));
    my $new_date_fmt = strftime($date_format, localtime($new_time_t));
    if ($delta_days > 0) {
        printf("%s is %d days after %s\n",
               $new_date_fmt, $abs_delta_days, $date_fmt);
    } elsif ($delta_days < 0) {
        printf("%s is %d days before %s\n",
               $new_date_fmt, $abs_delta_days, $date_fmt);
    } else {
        printf("%s and days are the same day :-)\n",
               $new_date_fmt, $date_fmt);
    }
}

sub usage { print <<"EOF"; }
usage:
    days [since|until] '<date>'
    days [between] '<date>' '<date>'
    days '<date>' [+|-] [+|-]<number>
<date>:
    recommended unambiguous format is: '2015-01-31'
    for other formats: perldoc Time::ParseDate
examples:
    days '2015-01-01'                 days since '2015-01-01'
    days '2055-12-31'                 days until '2055-12-31'
    days '2015-01-01' '2055-12-31'    days between '2015-01-01' '2055-12-31'
    days today + 10000
    days '1973-10-01' - 10000
EOF
