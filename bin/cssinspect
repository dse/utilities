#!/usr/bin/perl
use warnings;
use strict;
use open qw(locale);
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

###############################################################################

my $ph;
if (!open($ph, '-|', 'css-beautify', '-o-', @ARGV)) {
    die("pipe open failed: $!\n");
}

my $isComment;
my $prefix = '';
my $context = '';
my @context = ();
my $mode = '';
my @selectors = ();

my $blockCommentStarts;

while (<$ph>) {
    # safer form of chomp
    s{\R\z}{};

    # filter out comments
    s{ /\* .*? \*/ }{}x;

    # filter out block comments, part 1.  part 2 at bottom.
    $blockCommentStarts = 0;
    if (s{\s*/\*(?!.*\*/).*$}{}) {
        $blockCommentStarts = 1;
    }

    # filter out blank lines
    if (m{^\s*$}) {
        next;
    }

    # line only contains }
    if (m{^ \s* \} \s* $}x) {
        my $hash = pop(@context);
        $context = $hash->{context};
        $prefix = '';
        @selectors = ();
        $mode = '';
        next;
    }

    # line contains an atqueries query and starts a block
    if ($mode eq '' && m{^\s*(?<atqueries>\@.*?)\s*\{\s*$}) {
        my $x = $+{atqueries};
        $x = trim($x);
        $prefix .= "${x} { ";
        my $hash = {
            context => $context
        };
        push(@context, $hash);
        $context .= $prefix;
        $prefix = '';
        $mode = '';
        @selectors = ();
        next;
    }

    # line starts an atqueries query that will be continued on the next line.
    if ($mode eq '' && m{^\s*(?<atqueries>\@.*?)\s*$}) {
        my $x = $+{atqueries};
        $x = trim($x);
        $prefix .= "${x} { ";
        $mode = 'atqueries';
        next;
    }

    # line ends an atqueries query and starts a block.
    if ($mode eq 'atqueries' && m{^(?<atqueries>.*?)\s*\{\s*$}) {
        my $x = $+{atqueries};
        $x = trim($x);
        $prefix .= "${x} { ";
        my $hash = {
            context => $context
        };
        push(@context, $hash);
        $context .= $prefix;
        $prefix = '';
        $mode = '';
        @selectors = ();
        next;
    }

    # there will be selectors on the next line
    if (($mode eq '' || $mode eq 'selector') && m{^\s*(?<selector>.*)\,\s*$}) {
        my $x = $+{selector};
        $x = trim($x);
        push(@selectors, $x);
        $prefix .= "${x}, ";
        $mode = 'selector';
        next;
    }

    # line contains selector(s) and ends with an opening brace
    if (($mode eq '' || $mode eq 'selector') && m{^(?<selector>.*?)\s*\{\s*$}) {
        my $x = $+{selector};
        $x = trim($x);
        push(@selectors, $x);
        $prefix .= "${x} { ";
        my $hash = {
            context => $context,
            selectors => [@selectors],
        };
        push(@context, $hash);
        $context .= $prefix;
        $prefix = '';
        $mode = '';
        @selectors = ();
        next;
    }

    my $closing = (' }' x scalar @context);
    $_ = trim($_);

    if (scalar @context >= 1 && $context[-1]->{selectors}) {
        my $ctxt = (scalar @context >= 2) ? $context[-1]->{context} : '';
        foreach my $selector (@{$context[-1]->{selectors}}) {
            print("$ctxt${selector} { $prefix$_$closing\n");
        }
    } else {
        print("$context$prefix$_$closing\n");
    }

} continue {
    # filter out block comments, part 2.  part 1 near top.
    if ($blockCommentStarts) {
        while (<$ph>) {
            if (m{ \*/ }x) {
                $_ = $';
                last;
            }
        }
        if (!defined $_) {
            last;
        }
    }
}

sub trim {
    my $x = shift;
    $x =~ s{^\s*}{};
    $x =~ s{\s*$}{};
    return $x;
}
