#!/usr/bin/env perl
use warnings;
use strict;

use File::Basename qw(basename);
use Getopt::Long qw();

our $PROGNAME = basename($0);

our $spaces = 0;

Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'spaces=i' => \$spaces,
    'h|help' => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    togfmtable [<option> ...] [<filename> ...]
options:
    -h, --help           display this message
        --spaces=<int>   specify spaces to left and right of `|`
END

my $gfmTable;
my $oldARGV;
while (<>) {
    if (!defined $oldARGV || $oldARGV ne $ARGV) {
        if ($gfmTable) {
            print($gfmTable->asString());
        }
        undef $gfmTable;
        $. = 1;
    }
    if (!$gfmTable) {
        $gfmTable = Table::GFM->new();
        $gfmTable->{spaces} = $spaces;
    }
    s{\R\z}{};
    my @data = split("\t");
    if ($. == 1) {
        $gfmTable->setHeadings(@data);
    } else {
        $gfmTable->addRow(@data);
    }
    $oldARGV = $ARGV;
}
if ($gfmTable) {
    print($gfmTable->asString());
}

package Table::GFM {
    use List::Util qw(max);
    sub new {
        my ($class, @args) = @_;
        my $self = bless({}, $class);
        $self->{headings} = [];
        $self->{rows} = [];
        $self->{spaces} = 0;
        return $self;
    }
    sub setHeadings {
        my ($self, @headings) = @_;
        $self->{headings} = [@headings];
    }
    sub addRow {
        my ($self, @data) = @_;
        push(@{$self->{rows}}, [@data]);
    }
    sub asString {
        my ($self) = @_;
        my @widths;
        my $column = 0;
        my @columnIndexes;

        my @allRows;
        push(@allRows, $self->{headings}) if scalar @{$self->{headings}};
        push(@allRows, @{$self->{rows}});

        return '' if scalar @allRows == 0;

        while (1) {
            my @value = map { $_->[$column] } @allRows;

            # loop terminates when column indexed by $column is empty
            last if !grep { defined $_ } @value;

            my @length = max(map { length $_ } @value);
            my $width = scalar @length ? max(@length) : 0;

            push(@widths, $width);
            push(@columnIndexes, $column);
            $column += 1;
        }

        local $self->{widths}        = [@widths];
        local $self->{columnIndexes} = [@columnIndexes];

        return '' if $column == 0;

        my $result = '';
        $result .= $self->rowAsString(@{$self->{headings}});
        $result .= $self->hrAsString();
        foreach my $row (@{$self->{rows}}) {
            $result .= $self->rowAsString(@$row);
        }
        $result .= "\n";
        return $result;
    }
    sub rowAsString {
        my ($self, @row) = @_;
        my @printRow = map { sprintf('%-*s', $self->{widths}->[$_], $row[$_] // '') } @{$self->{columnIndexes}};
        if ($self->{spaces}) {
            @printRow = map {
                (' ' x $self->{spaces}) . $_ . (' ' x $self->{spaces})
            } @printRow;
        }
        return '|' . join('|', @printRow) . "|\n";
    }
    sub hrAsString {
        my ($self) = @_;
        my @printRow = map { '-' x ($_ + $self->{spaces} * 2) } @{$self->{widths}};
        foreach (@printRow) {
            s{^-}{:};           # left alignment
        }
        return '|' . join('|', @printRow) . "|\n";
    }
};
