#!/usr/bin/env perl
use warnings;
use strict;

use Getopt::Long;
use IPC::Run qw(run);
use POSIX qw(round);

my $x = 124;                    # mm --- 124mm = 4 7/8 in
my $y = 88;                     # mm --- 88mm = just under 3 1/2 in
my $res = 300;                  # dpi
my $quality = 100;              # jpg quality 0 to 100
my $mode = "Color";             # Color/Gray/Lineart
my $format = "scan%04d.jpg";
my $imagetype = "image/jpeg";
my $dry_run = 0;

Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions("x=f" => \$x,
                         "y=f" => \$y,
                         "resolution=f" => \$res,
                         "quality=f" => \$quality,
                         "n|dry-run" => \$dry_run,
                         "h|help" => sub { usage(); exit 0; })
    or die("Type '$0 --help' for help.\n");

sub usage { print <<"END"; }
usage:
  scan [OPTION ...] [ARGUMENT ...]
  scan <res>  <mode>    <fname>  <qu> <papersize> <orient>
       300dpi grayscale scan.jpg  0%  letter|a4   landscape
       ...    lineart   scan.png  to  8.5x11in    portrait
              color              100% 210x297mm
options:
  -x FLOAT                  width
  -y FLOAT                  height
      --resolution=FLOAT    dpi
      --quality=FLOAT       0 to 100
  -n, --dry-run
  -h, --help
arguments:
  res: <INTEGER>dpi
  mode: grayscale, lineart, color
  format: <FILENAME>.jpg, becomes <FILENAME>%04d.jpg if <FILENAME> contains no %d
  quality: 0% to 100%
  size: 5.5x3.5in, 124x88mm, 12.4x8.8mm
  orientation: landscape, portrait
defaults:
  size = 124mm x 88mm
  res = 300dpi
  quality = 100%
  mode = Color
  format = scan%04d.jpg
END

sub getfilename {
    my ($format) = @_;
    my $count = 1;
    my $filename;
    while (1) {
        $filename = sprintf($format, $count);
        if (!-e $filename) {
            return $filename;
        }
        $count += 1;
    }
}

read_dot_scan_file();

foreach my $arg (@ARGV) {
    process_arg($arg);
}

my $imgfilename = getfilename($format);
my $tmpfilename = $imgfilename . ".tmp";

my @scanimage_cmd = ("scanimage",
                     "-vvv",
                     "-x", $x,
                     "-y", $y,
                     "--mode", $mode,
                     "--resolution", "${res}dpi");
my @pnmtojpeg = ("pnmtojpeg", "--quality=$quality");
my @pnmtopng  = ("pnmtopng");

my @convert_cmd;
if ($imagetype eq "image/jpeg") {
    @convert_cmd = @pnmtojpeg;
} elsif ($imagetype eq "image/png") {
    @convert_cmd = @pnmtopng;
}

if ($dry_run) {
    printf("%s | %s > %s\n",
           join(" ", @scanimage_cmd),
           join(" ", @convert_cmd),
           $tmpfilename);
    printf("mv %s %s\n",
           $tmpfilename, $imgfilename);
    exit(0);
}

warn("Scanning to $tmpfilename ...\n");
if (!run(\@scanimage_cmd, '|', \@convert_cmd, '>', $tmpfilename)) {
    die("scanimage|pnmtojpeg failed\n");
}
if (!rename($tmpfilename, $imgfilename)) {
    die("rename failed\n");
}
warn("Saved as $imgfilename.\n");

sub read_dot_scan_file {
    my $fh;
    open($fh, "<", "$ENV{HOME}/.scan") or do {
        return
    };
    local $_;
    while (<$fh>) {
        next if /^\s*\#/;
        my @args = split();
        foreach my $arg (@args) {
            process_arg($arg);
        }
    }
}

sub process_arg {
    my ($arg) = @_;
    if ($arg =~ m{^(\d+)dpi$}i) {
        $res = $1;
    } elsif ($arg =~ m{^gr[ae]y(scale)?$}i) {
        $mode = "Gray";
    } elsif ($arg =~ m{^line(art)?$}i) {
        $mode = "Lineart";
    } elsif ($arg =~ m{^colou?r$}i) {
        $mode = "Color";
    } elsif ($arg =~ m{\.(jpe?g|png)$}i) {
        $format = $arg;
        if ($format !~ m{%\d*d}) {
            $format =~ s{\.[^\.]+$}{%04d$&};
        }
        if ($format =~ m{\.jpe?g$}i) {
            $imagetype = "image/jpeg";
        } elsif ($format =~ m{\.png$}i) {
            $imagetype = "image/png";
        } else {
            die("Unsupported format for filename: $format\n");
        }
    } elsif ($arg =~ m{^(\d+)\%$}) {
        $quality = $1;
        if ($quality < 0) {
            $quality = 0;
        } elsif ($quality > 100) {
            $quality = 100;
        }
    } elsif ($arg =~ m{^(\d+|\d*\.\d*)[x\*](\d+|\d*\.\d*)mm}) {
        ($x, $y) = ($1, $2);
    } elsif ($arg =~ m{^(\d+|\d*\.\d*)[x\*](\d+|\d*\.\d*)cm}) {
        ($x, $y) = ($1, $2);
        $x = $x * 10;
        $y = $y * 10;
    } elsif ($arg =~ m{^(\d+|\d*\.\d*)[x\*](\d+|\d*\.\d*)in}) {
        ($x, $y) = ($1, $2);
        $x = round($x * 25.4);
        $y = round($y * 25.4);
    } elsif ($arg eq "letter") {
        ($x, $y) = (8.5 * 25.4, 11 * 25.4);
    } elsif ($arg eq "a4") {
        ($x, $y) = (210, 297);
    } elsif ($arg eq "portrait" || $arg eq "vertical") {
        if ($x > $y) {
            ($x, $y) = ($y, $x);
        }
    } elsif ($arg eq "landscape" || $arg eq "horizontal") {
        if ($x < $y) {
            ($x, $y) = ($y, $x);
        }
    } elsif ($arg eq "extra") {
        $res = 150;
        $mode = "Gray";
        $quality = 75;
        $format = "extra%04d.jpg";
    } else {
        warn("'$arg' ?\n");
    }
}
