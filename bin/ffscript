#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import argparse
import os
import re

class FontForgeScript:
    def __init__(self, args):
        self.sourceFilename   = None
        self.destFilename     = None
        self.noHints          = False
        self.omitInstructions = False
        self.encodeUnicode    = False
        self.noOS2Vendor      = False
        self.lineHeight       = None
        self.fontName         = None
        self.familyName       = None
        self.fullName         = None
        self.version          = None
        self.sfntRevision     = None
        self.font             = None
        if args != None:
            self.setFromArgs(args)
    def run(self):
        self.load()
        self.runTasks()
        self.save()
    def runTasks(self):
        if not self.noOS2Vendor:
            self.font.os2_vendor = 'PfEd'
        if self.encodeUnicode:
            self.font.encoding = 'iso10646-1'
        self.setMetrics()
        self.setNames()
    def load(self):
        self.font = fontforge.open(self.sourceFilename)
    def save(self):
        filename = self.destFilename
        if not filename:
            filename = self.sourceFilename
        if re.search(r'\.sfd$', filename):
            self.font.save(filename)
        else:
            flags = []
            if self.noHints:
                flags += ['no-hints']
            if self.omitInstructions:
                flags += ['omit-instructions']
            flags = tuple(flags)
            self.font.generate(filename, flags = flags)
    def setFromArgs(self, args):
        print(args)
        self.sourceFilename   = args.source_filename
        self.destFilename     = args.dest_filename
        self.lineHeight       = args.line_height
        self.fontName         = args.font_name
        self.familyName       = args.family_name
        self.fullName         = args.full_name
        self.version          = args.version
        self.sfntRevision     = args.sfnt_revision
        self.noHints          = args.no_hints
        self.omitInstructions = args.omit_instructions
        self.encodeUnicode    = args.encode_unicode
        self.noOS2Vendor      = args.no_os2_vendor
        self.lineHeight       = args.line_height
    def setNames(self):
        if self.fontName != None:
            self.font.fontname = self.fontName
        if self.familyName != None:
            self.font.familyname = self.familyName
        if self.fullName != None:
            self.font.fullname = self.fullName
        if self.version != None:
            self.font.version = self.version
        if self.sfntRevision != None:
            self.font.sfntRevision = self.sfntRevision
    def setMetrics(self):
        if self.lineHeight != None:
            height = self.font.em
            finalHeight = int(0.5 + self.lineHeight * height)
            add = finalHeight - height
            addAscent = int(0.5 + 1.0 * add / 2)
            addDescent = add - addAscent
            finalAscent = self.font.ascent + addAscent
            finalDescent = self.font.descent + addDescent
            sys.stderr.write("BEFORE: hhea %d/%d typo %d/%d win %d/%d\n" % (
                self.font.hhea_ascent, self.font.hhea_descent,
                self.font.os2_typoascent, self.font.os2_typodescent,
                self.font.os2_winascent, self.font.os2_windescent
            ))
            self.font.hhea_ascent     = finalAscent
            self.font.os2_typoascent  = finalAscent
            self.font.os2_winascent   = finalAscent
            self.font.hhea_descent    = -finalDescent
            self.font.os2_typodescent = -finalDescent
            self.font.os2_windescent  = finalDescent
            sys.stderr.write("AFTER: hhea %d/%d typo %d/%d win %d/%d\n" % (
                self.font.hhea_ascent, self.font.hhea_descent,
                self.font.os2_typoascent, self.font.os2_typodescent,
                self.font.os2_winascent, self.font.os2_windescent
            ))

parser = argparse.ArgumentParser(
    description = 'Various font manipulation and conversion tasks'
)
parser.add_argument('source_filename')
parser.add_argument('dest_filename')
parser.add_argument('--no-hints',          action = 'store_true')
parser.add_argument('--omit-instructions', action = 'store_true')
parser.add_argument('--encode-unicode',    action = 'store_true')
parser.add_argument('--line-height',       type = float, help = 'line height to use for final metrics, e.g., 1.2')
parser.add_argument('--font-name',                       help = 'specify a new FontName')
parser.add_argument('--family-name',                     help = 'specify a new FamilyName')
parser.add_argument('--full-name',                       help = 'specify a new FullName')
parser.add_argument('--version',                         help = 'set version number')
parser.add_argument('--sfnt-revision',     type = float, help = 'set sfnt revision number (e.g., 2020.03)')
parser.add_argument('--no-os2-vendor',     action = 'store_true')

args = parser.parse_args()
ffs = FontForgeScript(args)
ffs.run()
