#!/usr/bin/env perl
use warnings;
use strict;
use open ':locale';

use File::Basename qw(basename);
use Text::Tabs qw(expand);
use Getopt::Long qw();
use List::Util qw(max);

my $half = 0;
my $narrow = 0;
my $blockifying = basename($0) eq 'blockify';

Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    'n|narrow' => \$narrow,
    'h|half'   => \$half,
) or die(":-(\n");

my $topHalf;
my $bottomHalf;

while (<>) {
    s{\R\z}{};                  # safer chomp, works with \r\n and \n
    $_ = expand($_);
    if ($blockifying) {
        if ($half) {
            if ($. % 2 == 1) {
                $topHalf = $_;
                if (eof(\*ARGV)) {
                    $bottomHalf = '';
                } else {
                    next;
                }
            } else {
                $bottomHalf = $_;
            }
            my $maxLen = max(length($topHalf), length($bottomHalf));
            $topHalf    = sprintf('%-*s', $maxLen, $topHalf);
            $bottomHalf = sprintf('%-*s', $maxLen, $bottomHalf);
            my $line = '';
            for (my $i = 0; $i < $maxLen; $i += 1) {
                my $t = substr($topHalf, $i, 1);
                my $b = substr($bottomHalf, $i, 1);
                my $tsp = $t =~ m{^\s+$};
                my $bsp = $b =~ m{^\s+$};
                $line .= " " if  $tsp &&  $bsp;
                $line .= "'" if !$tsp &&  $bsp;
                $line .= "." if  $tsp && !$bsp;
                $line .= ":" if !$tsp && !$bsp;
            }
            $_ = $line;
        }
        if ($narrow) {
            $_ = blockifyNarrow($_);
        } else {
            $_ = blockify($_);
        }
    } else {
        if ($narrow) {
            $_ = unblockifyNarrow($_);
        } else {
            $_ = unblockify($_);
        }
        if ($half) {
            my $top    = $_;
            my $bottom = $_;
            $top =~ s{[:']}{:}g;
            $top =~ s{\.}{ }g;
            $bottom =~ s{[:.]}{:}g;
            $bottom =~ s{[']}{ }g;
            $_ = "$top\n$bottom";
        }
    }
    print("$_\n");
}

our %ASCII;
our %BLOCKIFY;
our %BLOCKIFY_NARROW;
our %UNBLOCKIFY;
our %UNBLOCKIFY_NARROW;
BEGIN {
    # for normalizing regular text before blockifying
    %ASCII = (
        "'" => "'",
        '"' => "'",
        ";" => ":",
        ":" => ":",
        "," => ".",
        "." => ".",
        " " => " ",
        "^" => "'",
        "_" => ".",
        "`" => "'",
        " " => " ",
        "\N{NO-BREAK SPACE}" => " ",
    );
}
BEGIN {
    %BLOCKIFY = (
        " " => " ",
        ":" => "\N{FULL BLOCK}",
        "'" => "\N{UPPER HALF BLOCK}",
        "." => "\N{LOWER HALF BLOCK}",
    );
    %BLOCKIFY_NARROW = (
        "  " => " ",
        "::" => "\N{FULL BLOCK}",
        ": " => "\N{LEFT HALF BLOCK}",
        " :" => "\N{RIGHT HALF BLOCK}",
        "''" => "\N{UPPER HALF BLOCK}",
        ".." => "\N{LOWER HALF BLOCK}",
        ". " => "\N{QUADRANT LOWER LEFT}",
        " ." => "\N{QUADRANT LOWER RIGHT}",
        "' " => "\N{QUADRANT UPPER LEFT}",
        " '" => "\N{QUADRANT UPPER RIGHT}",
        "'." => "\N{QUADRANT UPPER LEFT AND LOWER RIGHT}",
        ".'" => "\N{QUADRANT UPPER RIGHT AND LOWER LEFT}",
        ":." => "\N{QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT}",
        ":'" => "\N{QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT}",
        "':" => "\N{QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT}",
        ".:" => "\N{QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT}",
    );

    # OMG it's kind of neat how reverse works here.
    %UNBLOCKIFY        = reverse %BLOCKIFY;
    %UNBLOCKIFY_NARROW = reverse %BLOCKIFY_NARROW;
}

sub blockify {
    my ($str) = @_;
    $str =~ s{.}{$ASCII{$&} // ':'}ge;
    $str =~ s{.}{$BLOCKIFY{$&}}ge;
    return $str;
}
sub blockifyNarrow {
    my ($str) = @_;
    $str =~ s{.}{$ASCII{$&} // ':'}ge;
    $str .= ' ' if length($str) % 2 == 1;
    $str =~ s{..}{$BLOCKIFY_NARROW{$&}}ge;
    return $str;
}
sub unblockify {
    my ($str) = @_;
    $str =~ s{.}{$UNBLOCKIFY{$&} // $&}ge;
    return $str;
}
sub unblockifyNarrow {
    my ($str) = @_;
    $str =~ s{.}{$UNBLOCKIFY_NARROW{$&} // "$&$&"}ge;
    return $str;
}
