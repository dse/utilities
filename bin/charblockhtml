#!/usr/bin/env perl
use warnings;
use strict;
use HTML::Entities qw(encode_entities);
use Unicode::UCD qw(charblocks charinfo charprop);
use POSIX qw(floor);
use open IO => qw(:locale);

our %NON_PRINTING = (
    Cc => 1,
    Cf => 1,
    Co => 1,
    Cs => 1,
    Zl => 1,
    Zp => 1,
    Zs => 1,
);
our %NO_CHAR_GRID = (
    'High Surrogates' => 1,
    'High Private Use Surrogates' => 1,
    'Low Surrogates' => 1,
    'Specials' => 1,
    'Private Use Area' => 1,
);
our %CHAR_GRID = (
    'Basic Latin' => 1,             # U+0000 - U+007F
    'Latin-1 Supplement' => 1,      # U+0080 - U+00FF
    'Latin Extended-A' => 1,        # U+0100 - U+017F
    'Latin Extended-B' => 1,        # U+0180 - U+024F
    'IPA Extensions' => 1,          # U+0250 - U+02AF
    'Spacing Modifier Letters' => 1, # U+02B0 - U+02FF
    'Combining Diacritical Marks' => 1, # U+0300 - U+036F
    'Greek and Coptic' => 1,            # U+0370 - U+03FF
    'Cyrillic' => 1,                    # U+0400 - U+04FF
    'Cyrillic Supplement' => 1,         # U+0500 - U+052F
    # 'Cyrillic Extended-C' => 1,         # U+1C80 - U+1C8F
    'Latin Extended Additional' => 1,   # U+1E00 - U+1EFF
    'Greek Extended' => 1,              # U+1F00 - U+1FFF
    'Latin Extended-C' => 1,            # U+2C60 - U+2C7F
    'Cyrillic Extended-A' => 1,         # U+2DE0 - U+2DFF
    'Cyrillic Extended-B' => 1,         # U+A640 - U+A69F
    'Latin Extended-D' => 1,            # U+A720 - U+A7FF
    # 'Latin Extended-E' => 1,            # U+AB30 - U+AB6F
    # 'Latin Extended-F' => 1,            # U+10780 - U+107BF
    # 'Latin Extended-G' => 1,            # U+1DF00 - U+1DFFF

    'General Punctuation' => 1,                 # U+2000 - U+206F
    'Superscripts and Subscripts' => 1,         # U+2070 - U+209F
    'Currency Symbols' => 1,                    # U+20A0 - U+20CF
    'Combining Diacritical Marks for Symbols' => 1, # U+20D0 - U+20FF
    'Letterlike Symbols' => 1,                      # U+2100 - U+214F
    'Number Forms' => 1,                            # U+2150 - U+218F
    'Arrows' => 1,                                  # U+2190 - U+21FF
    'Mathematical Operators' => 1,                  # U+2200 - U+22FF
    'Miscellaneous Technical' => 1,                 # U+2300 - U+23FF
    'Control Pictures' => 1,                        # U+2400 - U+243F
    'Optical Character Recognition' => 1,           # U+2440 - U+245F
    # 'Enclosed Alphanumerics' => 1,                  # U+2460 - U+24FF
    'Box Drawing' => 1,                             # U+2500 - U+257F
    'Block Elements' => 1,                          # U+2580 - U+259F
    'Geometric Shapes' => 1,                        # U+25A0 - U+25FF
    'Miscellaneous Symbols' => 1,                   # U+2600 - U+26FF
    'Dingbats' => 1,                                # U+2700 - U+27BF
    'Miscellaneous Mathematical Symbols-A' => 1,    # U+27C0 - U+27EF
    'Supplemental Arrows-A' => 1,                   # U+27F0 - U+27FF
    # 'Braille Patterns' => 1,                        # U+2800 - U+28FF
    'Supplemental Arrows-B' => 1,                   # U+2900 - U+297F
    'Miscellaneous Mathematical Symbols-B' => 1,    # U+2980 - U+29FF
    'Supplemental Mathematical Operators' => 1,     # U+2A00 - U+2AFF
    'Miscellaneous Symbols and Arrows' => 1,        # U+2B00 - U+2BFF

);

my $charblocks = charblocks();
my @charblocks = sort { $a->[0]->[0] <=> $b->[0]->[0] } values %$charblocks;
print(<<"END");
<html>
<head>
<meta charset="utf-8">
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
    }
    .block-table {
        width: 100%;
        margin-bottom: 1rem;
        border-spacing: 0;
        border-collapse: collapse;
        table-layout: fixed;
    }
    .block-table > thead {
        border-bottom: 1px solid black;
    }
    .block-table > thead > tr {
        vertical-align: bottom;
    }
    .block-table > thead > tr > th {
        text-align: left;
        padding: 0.25em 1em 0.25em 0;
        border-bottom: 1px solid black;
    }
    .block-table > thead > tr > th:nth-child(1),
    .block-table > thead > tr > th:nth-child(2) {
        width: 4em;
    }
    .block-table > thead > tr > th:nth-child(3) {
        width: 3em;
    }
    .block-table > tbody {
    }
    .block-table > tbody > tr {
        vertical-align: baseline;
    }
    .block-table > tbody > tr > td {
        text-align: left;
        padding: 0.25em 1em 0.25em 0;
        border-bottom: 1px solid black;
    }
    .char-table {
        width: 100%;
        border-spacing: 0;
        border-collapse: collapse;
        table-layout: fixed;
        font-size: 150%;
    }
    .char-table > tbody > tr > td {
        padding: 0.125em 0;
        text-align: center;
    }
</style>
</head>
<body>
<div class="container">
<table class="block-table">
    <thead>
        <tr>
            <th>Start</th>
            <th>End</th>
            <th>Block Name</th>
        </tr>
    </thead>
    <tbody>
END
foreach my $charblock (@charblocks) {
    foreach my $range (@$charblock) {
        my ($start, $end, $name) = @$range;
        if (-t 2) {
            printf STDERR ("U+%04X %s\n", $start, $name);
        }
        my $url = sprintf("https://www.unicode.org/charts/PDF/U%04X.pdf", $start);
        printf(<<"END", $start, $end, $end - $start + 1, $url, $name);
            <tr>
                <td title="Start">U+%04X</td>
                <td title="End">U+%04X</td>
                <td title="Size">%d</td>
                <td title="Block Name">
                    <div><a target="_blank" href="%s">%s</a></div>
END
        if ($CHAR_GRID{$name}) {
            print_char_table($start, $end, $name);
            if (-t 2) {
                printf STDERR ("    %d codepoints\n", $end - $start + 1);
            }
        }
        print(<<"END");
                </td>
            </tr>
END
    }
}
print(<<"END");
    </tbody>
</table>
</div>
</body>
</html>
END

sub print_char_table {
    my ($start, $end) = @_;
    print(<<"END");
<table class="char-table">
    <tbody>
END
    foreach my $row (floor($start / 16) .. floor($end / 16)) {
        print("<tr>\n");
        foreach my $col (0 .. 15) {
            my $codepoint = $row * 16 + $col;
            my $charinfo = charinfo($codepoint);
            if (!defined $charinfo) {
                printf("<td title=\"U+%04X (no character)\"></td>\n", $codepoint);
                next;
            }
            my $category = $charinfo->{category};
            if ($NON_PRINTING{$category}) {
                printf("<td title=\"U+%04X %s\"></td>\n", $codepoint, $charinfo->{name});
                next;
            }
            printf("<td title=\"U+%04X %s\">%s</td>\n", $codepoint, $charinfo->{name}, chr($codepoint));
        }
        print("</tr>\n");
    }
    print(<<"END");
    </tbody>
</table>
END
}
