#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
use POSIX qw(floor);

my $DICT = "/usr/share/dict/words";
my $OVERLAP = 2;
my $MIN_SEGMENT_COUNT = 2;
my $MAX_SEGMENT_COUNT = 4;
my $MIN_WORD_LENGTH = 6;
my $MAX_WORD_LENGTH = 8;

my @words = readWordsFile($DICT);
my $word = generateWord(@words);
print("$word\n");

sub generateWord {
    my ($wordList) = @_;

    my $overlap = $OVERLAP;
    my $segmentCount = randomIntBetween($MIN_SEGMENT_COUNT, $MAX_SEGMENT_COUNT);
    my $minWordLength = $MIN_WORD_LENGTH;
    my $maxWordLength = $MAX_WORD_LENGTH;

    my $overlapRx = '.' x $overlap;
    $overlapRx = qr{$overlapRx};

    my @words = @$wordList;

    # rm proper nouns and contractions
    @words = grep { $_ =~ m{^[a-z]+$} } @words;

    # rm words failing length criteria
    @words = grep { length($_) >= $minWordLength && length($_) <= $maxWordLength } @words;

    my %words = map { ($_ => 1) } @words;

    # randomly start with a word.
    my $word = $words[floor(rand(scalar(@words)))];

    # markov chain based on overlapping word segments $overlap
    # characters long
    do {
        for (my $i = 1; $i <= $segmentCount - 1; $i += 1) {
            my $end = substr($word, -$overlap);
            my $rx = qr{\Q$end\E..};
            my @next = grep { $_ =~ $rx } @words;
            my $next = $next[floor(rand(scalar(@next)))];
            my @indices = indices($next, $end);
            my $index = $indices[floor(rand(scalar(@indices)))];
            $word .= substr($next, $index + $overlap);
        }
    } while ($words{$word});    # cannot actually be a word

    return $word;
}

sub readWordsFile {
    my ($dict) = @_;
    $dict //= $DICT;
    my $fh;
    open($fh, '<', $dict) || die("$dict: $!\n");
    my @words;
    while (<$fh>) {
        s{\R\z}{};              # also chomps \r\n
        push(@words, split());
    }
    return @words;
}

# return all positions of $substr in $str.
#
# good test: indices('confrontational', 'on') => (1, 5, 11)
#                      ^^  ^^    ^^
sub indices {
    my ($str, $substr) = @_;
    return if !defined $str || !defined $substr || length($substr) > length($str);
    my @indices;
    my $index;
    my $base = 0;
    while (length($str) >= length($substr) && ($index = index($str, $substr)) != -1) {
        push(@indices, $index + $base);
        $str = substr($str, $index + 1);
        $base += $index + 1;
    }
    return @indices;
}

# between $a and $b, possibly including $a or $b.
sub randomIntBetween {
    my ($a, $b) = @_;
    return $a + floor(rand($b - $a + 1));
}
