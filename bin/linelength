#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
our $useDefaultAction = 1;
our $printMaxLength;
our $printLineLengths;
our $printPercentile;
our $printLengthCounts;
our $numberLines;
our $printText = 1;
our $header;
our $numberByFile;

use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'help'           => sub { usage(); exit(0); },
    'h|header'        => sub { $header = 1; },
    'c|length-counts' => sub { $useDefaultAction = 0; $printLengthCounts = 1; },
    'm|max'          => sub { $useDefaultAction = 0; $printMaxLength = 1; },
    'l|lengths'      => sub { $useDefaultAction = 0; $printLineLengths = 1; },
    'n|number-lines' => sub { $numberLines = 1; },
    'N|number-by-file'  => sub { $numberLines = 1; $numberByFile = 1; },
    't|text'         => sub { $printText = 1; },
    'p|percentile=i' => sub { $useDefaultAction = 0; $printPercentile = $_[1]; },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -h, --header
    -n, --number-lines
    -N, --number-by-file
    -t, --text
    -c, --length-counts
    -m, --max                       print maximum line length
    -l, --lengths                   print each line's length
    -p, --percentile=<percent>      print <percent>th percentile maximum length
                                        e.g., --percentile=99
        --help                      display this message
END

if ($useDefaultAction) {
    $printLineLengths = 1;
}

#------------------------------------------------------------------------------
my $lineCount;
my @length;
my $maxLength = -1;

while (<>) {
    s{\R\z}{};
    my $length = length($_);
    $lineCount += 1;
    $maxLength = $length if $maxLength < $length;
    if ($printLineLengths) {
        if ($numberLines) {
            printf("%6d\t%6d", $., $length);
        } else {
            printf("%6d", $length);
        }
        if ($printText) {
            printf("\t%s", $_);
        }
        print("\n");
    }
    $length[$length] += 1;
}

if ($printLengthCounts) {
    for (my $i = 0; $i <= $maxLength; $i += 1) {
        my $count = $length[$i] // 0;
        if ($count) {
            printf("%6d  %6d\n", $i, $count);
        }
    }
}

if ($printMaxLength) {
    say "maximum line length is $maxLength";
}

if ($printPercentile) {
    my $percentileLineCount = int($printPercentile * $lineCount / 100);
    my $uptoLineCount = 0;
    for (my $i = 0; $i <= $maxLength; $i += 1) {
        $uptoLineCount += ($length[$i] // 0);
        if ($uptoLineCount >= $percentileLineCount) {
            my $widerLineCount = $lineCount - $uptoLineCount;
            say "${printPercentile} percentile maximum line length is $i";
            say "${widerLineCount} of ${lineCount} lines are wider";
            last;
        }
    }
}
