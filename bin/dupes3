#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use feature qw(state);

use File::Find qw();
use Digest::SHA qw();
use Scalar::Util qw(looks_like_number);
use File::Spec::Functions qw(abs2rel);
use Generator::Object;
use Getopt::Long;
use List::Util qw(uniq);

our $verbose = 0;
our $dryRun = 0;

Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    "v|verbose+" => \$verbose,
    "n|dry-run" => \$dryRun,
) or die("unknown option\n");

STDOUT->autoflush(1);
STDERR->autoflush(1);

my $minSize = 1048576;
if (scalar @ARGV && looks_like_number($ARGV[0])) {
    $minSize = shift(@ARGV);
}

die("not enough arguments\n") if scalar @ARGV < 2;
my (@dirnames) = @ARGV;

while (scalar @dirnames >= 2) {
    my $dir = shift(@dirnames);
    if ($verbose) {
        warn("INFO: dupes $dir @dirnames\n");
    }
    dupes($dir, @dirnames);
}

our %done;
our %count;

sub dupes {
    my ($dir, @otherDirnames) = @_;
    my $wanted = sub {
        my @lstat = lstat($_);
        return unless scalar @lstat;
        if ($verbose && -t 2) {
            my $count = ($count{$File::Find::dir} += 1);
            progress("%s %d", $File::Find::dir, $count);
        }
        return if -d _ || !-f _ || -s _ < $minSize;
        my $rel = abs2rel($_, $dir);
        return if $done{$rel};
        my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks) = @lstat;
        my @otherFilenames = map { "$_/$rel" } @otherDirnames;
        @otherFilenames = grep { -f $_ && -s $_ == $size } @otherFilenames;
        return unless scalar @otherFilenames;
        my @filenames = ($_, @otherFilenames);
        my @groups = checkdupes(@filenames);
        foreach my $group (@groups) {
            my @filenames = map { $_->{filename} } @$group;
            if ($dryRun) {
                progress();
                print("- ", join("\n  ", @filenames), "\n");
                warn("Checking sums...\n");
                my @sum = map { sum($_) } @filenames;
                warn("    @sum\n");
                @sum = uniq sort @sum;
                warn("    @sum\n");
                if (scalar @sum > 1) {
                    die("all files are not the same contents\n");
                }
            } else {
                my (@firstFilename, @otherFilenames) = @filenames;
                foreach my $filename (@otherFilenames) {
                    my $result = unlink($filename);
                    if (!$result) {
                        progress();
                        warn("failed to rm $filename: $!\n");
                    } else {
                        if ($verbose) {
                            progress();
                            warn("removed $filename\n");
                        }
                    }
                }
            }
        }
    };
    File::Find::find({ wanted => $wanted, no_chdir => 1 }, $dir);
    progress();
}

sub progress {
    state $empty = 1;
    return if !-t 2;
    return unless $verbose;
    my ($format, @params) = @_;
    if (!defined $format) {
        return if $empty;
        print STDERR ("\r\e[K");
        $empty = 1;
    } else {
        printf STDERR ("\r$format", @params);
        print STDERR ("\e[K");
        $empty = 0;
    }
}

sub checkdupes {
    my (@filenames) = @_;
    my @objects = map { { filename => $_ } } @filenames;
    foreach my $object (@objects) {
        my $fh;
        if (!open($fh, '<:raw', $object->{filename})) {
            $object->{error} = $!;
        } else {
            $object->{fh} = $fh;
        }
    }
    @objects = grep { !$_->{error} } @objects;
    return if scalar @objects < 2;

    my @results;

    my @groups = ( [@objects] );
    while (1) {
        my @newgroups;
        foreach my $group (@groups) {
            my @done;
            my %group;
            foreach my $obj (@$group) {
                my $data;
                my $bytes = sysread($obj->{fh}, $data, 4096);
                if (!defined $bytes) {
                    close($obj->{fh});
                    delete $obj->{fh};
                } elsif (!$bytes) {
                    close($obj->{fh});
                    delete $obj->{fh};
                    push(@done, $obj);
                } else {
                    push(@{$group{$data}}, $obj) if defined $data;
                }
            }
            if (scalar @done >= 2) {
                push(@results, [@done]);
            }
            foreach my $key (keys %group) {
                my $group = $group{$key};
                if (scalar @$group >= 2) {
                    push(@newgroups, $group);
                }
            }
        }
        if (!scalar @newgroups) {
            return @results;
        }
        @groups = @newgroups;
    }
}


sub sum {
    my ($filename) = @_;
    my $sha = Digest::SHA->new('1');
    $sha->addfile($filename);
    return $sha->hexdigest();
}
