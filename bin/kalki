#!/usr/bin/env perl
use warnings;
use strict;
use POSIX qw(:math_h);
use POSIX qw(:math_h_c99);
use Math::Trig qw(:pi);
use Math::Trig qw(:radial);
use Math::Trig qw(:great_circle);
use Term::ReadLine;
use Text::Wrap;
our $last_result = 0;
sub _ () {
    # prototype required for things like "_ + 5" to work
    return $last_result;
}
if (!scalar @ARGV && -t 0 && -t 1) {
    my $term = Term::ReadLine->new('kalki');
    my $prompt = 'kalki>';
    while (defined($_ = $term->readline($prompt))) {
        evaluate_print();
    }
} else {
    while (<>) {
        evaluate_print();
    }
}
sub evaluate_print {
    if (/^\s*(help|\?)\s*$/i) {
        print(wrap('', '', join(', ', imports())), "\n");
        next;
    }
    my $result = evaluate($_);
    if ($@) {
        warn($@);
        next;
    }
    print("$result\n");
}
sub evaluate {
    my ($expr, $fmt) = @_;
    my $result = eval($expr);
    if (defined $result) {
        $last_result = $result;
    }
    return $result;
}
sub imports {
    my %imports = map { $_ => 1 } (@{$POSIX::EXPORT_TAGS{math_h}},
                                   @{$POSIX::EXPORT_TAGS{math_h_c99}},
                                   @{$Math::Trig::EXPORT_TAGS{pi}},
                                   @{$Math::Trig::EXPORT_TAGS{radial}},
                                   @{$Math::Trig::EXPORT_TAGS{great_circle}});
    return sort keys %imports;
}
